openapi: 3.0.3
info:
  title: TRISA Node API
  description: |-
    The TRISA Node API allows users to interact with the TRISA Self-Hosted Node
    in a programmatic fashion. It is intended that this API is served on an internal
    IP address with routing only available to internal services.
  termsOfService: https://trisa.io/terms/
  contact:
    email: support@rotational.io
  license:
    name: MIT Licensed
    url: https://github.com/trisacrypto/trisa/blob/main/LICENSE
  version: v0.1.1
externalDocs:
  description: TRISA Developer Documentation
  url: https://trisa.dev
tags:
  - name: authentication
    description: Allow for authentication against Envoy node.
  - name: account
    description: Stored information about your user/customer accounts.
  - name: crypto_address
    description: Associate crypto addresses with user accounts.
  - name: transaction
    description: Travel Rule information exchanges for specific crypto asset transactions.
  - name: counterparty
    description: Counterparties to exchange travel rule information with using TRISA or TRP protocols.
  - name: secure_envelope
    description: Secure Envelopes provide an audit record of travel rule exchanges with a counterparty.
paths:
  /v1/status:
    get:
      summary: Heartbeat endpoint
      description: Allows users to check the status of the node
      operationId: status
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusReply'
        '503':
          description: Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusReply'
  /v1/authenticate:
    post:
      tags:
        - authentication
      summary: Authenticate
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                client_secret:
                  type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
        '403':
          description: invalid api credentials
  /v1/reauthenticate:
    post:
      tags:
        - authentication
      summary: Reauthenticate with refresh token
      operationId: reauthenticate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
        '403':
          description: invalid reauthentication credentials
  /v1/transactions:
    get:
      tags:
        - transaction
      summary: List transactions
      description: Paginated list of all transactions
      operationId: listTransactions
      security:
        - bearer-auth: [ ]
      parameters:
        - name: page_size
          in: query
          schema:
            type: integer
        - name: next_page_token
          in: query
          schema:
            type: string
        - name: prev_page_token
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsList'
    post:
      tags:
        - transaction
      summary: Create transaction
      description: Create a new transaction
      operationId: createTransaction
      security:
        - bearer-auth: [ ]
      requestBody:
        description: Create a new transaction
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '201':
          description: Transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid input
        '422':
          description: Validation exception or missing field
  /v1/transactions/{transactionID}:
    get:
      tags:
        - transaction
      summary: Find transaction by ID
      description: Returns a single transaction if found
      operationId: transactionDetail
      security:
        - bearer-auth: [ ]
      parameters:
        - name: transactionID
          in: path
          description: ID of transaction to return
          required: true
          schema:
            type: string
            format: UUID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
    put:
      tags:
        - transaction
      summary: Updates a transaction record
      description: Update a transaction record (does not patch, all fields are required)
      operationId: updateTransaction
      security:
        - bearer-auth: [ ]
      parameters:
        - name: transactionID
          in: path
          description: ID of transaction to return
          required: true
          schema:
            type: string
            format: UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid input
        '422':
          description: Validation exception or missing field
    delete:
      tags:
        - transaction
      summary: Deletes a transaction
      description: Deletes a transaction
      operationId: deleteTransaction
      security:
        - bearer-auth: [ ]
      parameters:
        - name: transactionID
          in: path
          description: ID of transaction to return
          required: true
          schema:
            type: string
            format: UUID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        '404':
          description: Transaction not found
  /v1/transactions/{transactionID}/secure-envelopes:
    get:
      tags:
        - secure_envelope
      summary: List secure envelopes for transaction
      description: Paginated list of all secure envelopes for the specified transaction
      operationId: listSecureEnvelopes
      security:
        - bearer-auth: [ ]
      parameters:
        - name: transactionID
          in: path
          description: ID of transaction to return secure envelopes for
          required: true
          schema:
            type: string
            format: UUID
        - name: page_size
          in: query
          schema:
            type: integer
        - name: next_page_token
          in: query
          schema:
            type: string
        - name: prev_page_token
          in: query
          schema:
            type: string
        - name: decrypt
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopesList'
  /v1/transactions/{transactionID}/secure-envelopes/{envelopeID}:
    get:
      tags:
        - secure_envelope
      summary: Lookup a specific secure envelope
      description: Returns detailed information about the specified secure envelope
      operationId: envelopeDetail
      security:
        - bearer-auth: [ ]
      parameters:
        - name: transactionID
          in: path
          description: ID of transaction to return secure envelopes for
          required: true
          schema:
            type: string
            format: UUID
        - name: envelopeID
          in: path
          description: ID of secure envelope to return
          required: true
          schema:
            type: string
            format: ULID
        - name: decrypt
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecureEnvelope'
        '404':
          description: Account or crypto address not found
    delete:
      tags:
        - secure_envelope
      summary: Delete a specific secure envelope
      description: Deletes a specified secure envelope
      operationId: deleteSecureEnvelope
      parameters:
        - name: transactionID
          in: path
          required: true
          schema:
            type: string
        - name: envelopeID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        '404':
          description: Secure envelop not found
  /v1/accounts:
    get:
      tags:
        - account
      summary: List customer accounts
      description: Paginated list of all stored customer accounts
      operationId: listAccounts
      security:
        - bearer-auth: [ ]
      parameters:
        - name: page_size
          in: query
          schema:
            type: integer
        - name: next_page_token
          in: query
          schema:
            type: string
        - name: prev_page_token
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountList'
    post:
      tags:
        - account
      summary: Create customer account
      description: Create a new customer account
      operationId: createAccount
      security:
        - bearer-auth: [ ]
      requestBody:
        description: Create a new customer account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        '201':
          description: Account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid input
        '422':
          description: Validation exception or missing field
  /v1/account/{accountID}:
    get:
      tags:
        - account
      summary: Find account by ID
      description: Returns a single account if found
      operationId: accountDetail
      security:
        - bearer-auth: [ ]
      parameters:
        - name: accountID
          in: path
          description: ID of account to return
          required: true
          schema:
            type: string
            format: ULID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Account not found
    put:
      tags:
        - account
      summary: Updates an account record
      description: Update an account record (does not patch, all fields are required)
      operationId: updateAccount
      security:
        - bearer-auth: [ ]
      parameters:
        - name: accountID
          in: path
          description: ID of account to return
          required: true
          schema:
            type: string
            format: ULID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid input
        '422':
          description: Validation exception or missing field
    delete:
      tags:
        - account
      summary: Deletes an account
      description: Deletes an account and associated crypto addresses
      operationId: deleteAccount
      security:
        - bearer-auth: [ ]
      parameters:
        - name: accountID
          in: path
          description: ID of account to return
          required: true
          schema:
            type: string
            format: ULID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        '404':
          description: Account not found
  /v1/accounts/{accountID}/crypto-addresses:
    get:
      tags:
        - crypto_address
      summary: list all crypto addresses for account
      description: returns a paginated list of all crypto addresses associated with the account
      operationId: listCryptoAddresses
      security:
        - bearer-auth: [ ]
      parameters:
        - name: accountID
          in: path
          description: ID of account to return
          required: true
          schema:
            type: string
            format: ULID
        - name: page_size
          in: query
          schema:
            type: integer
        - name: next_page_token
          in: query
          schema:
            type: string
        - name: prev_page_token
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoAddressList'
        '404':
          description: Account not found
    post:
      tags:
        - crypto_address
      summary: Create crypto address
      description: Create a crypto address associated with the specified account
      operationId: createCryptoAddress
      security:
        - bearer-auth: [ ]
      parameters:
        - name: accountID
          in: path
          description: ID of account to return
          required: true
          schema:
            type: string
            format: ULID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoAddress'
      responses:
        '201':
          description: Crypto address created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoAddress'
        '400':
          description: Invalid input
        '404':
          description: Account not found
        '422':
          description: Validation exception or missing field
  /v1/accounts/{accountID}/crypto-addresses/{cryptoAddressID}:
    get:
      tags:
        - crypto_address
      summary: Lookup a specific crypto address
      description: Returns detailed information about the specified crypto address
      operationId: cryptoAddressesDetail
      security:
        - bearer-auth: [ ]
      parameters:
        - name: accountID
          in: path
          description: ID of account to return
          required: true
          schema:
            type: string
            format: ULID
        - name: cryptoAddressID
          in: path
          description: ID of crypto address to return
          required: true
          schema:
            type: string
            format: ULID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoAddress'
        '404':
          description: Account or crypto address not found
    put:
      tags:
        - crypto_address
      summary: Update a crypto address
      description: Update a crypto address record (does not patch, all fields are required)
      operationId: updateCryptoAddresses
      security:
        - bearer-auth: [ ]
      parameters:
        - name: accountID
          in: path
          description: ID of account to return
          required: true
          schema:
            type: string
            format: ULID
        - name: cryptoAddressID
          in: path
          description: ID of crypto address to return
          required: true
          schema:
            type: string
            format: ULID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoAddress'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoAddress'
        '404':
          description: Account or crypto address not found
        '422':
          description: Validation exception or missing field
    delete:
      tags:
        - crypto_address
      summary: Delete a crypto address
      description: Delete a crypto address record associated with account
      operationId: deleteCryptoAddresses
      security:
        - bearer-auth: [ ]
      parameters:
        - name: accountID
          in: path
          description: ID of account to return
          required: true
          schema:
            type: string
            format: ULID
        - name: cryptoAddressID
          in: path
          description: ID of crypto address to return
          required: true
          schema:
            type: string
            format: ULID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        '404':
          description: Account or crypto address not found
  /v1/counterparties:
    get:
      tags:
        - counterparty
      summary: List counterparties
      description: Paginated list of all stored counterparties
      operationId: listCounterparties
      security:
        - bearer-auth: [ ]
      parameters:
        - name: page_size
          in: query
          schema:
            type: integer
        - name: next_page_token
          in: query
          schema:
            type: string
        - name: prev_page_token
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CounterpartyList'
    post:
      tags:
        - counterparty
      summary: Create counterparty
      description: Create a new counterparty
      operationId: createCounterparty
      security:
        - bearer-auth: [ ]
      requestBody:
        description: Create a new counterparty
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Counterparty'
        required: true
      responses:
        '200':
          description: Counterparty created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Counterparty'
        '400':
          description: Invalid input
        '422':
          description: Validation exception or missing field
  /v1/counterparties/{counterpartyID}:
    get:
      tags:
        - counterparty
      summary: Find counterparty by ID
      description: Returns a single counterparty if found
      operationId: counterpartyDetail
      security:
        - bearer-auth: [ ]
      parameters:
        - name: counterpartyID
          in: path
          description: ID of counterparty to return
          required: true
          schema:
            type: string
            format: ULID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Counterparty'
        '404':
          description: Counterparty not found
    put:
      tags:
        - counterparty
      summary: Updates a counterparty record
      description: Update a counterparty record (does not patch, all fields are required)
      operationId: updateCounterparty
      security:
        - bearer-auth: [ ]
      parameters:
        - name: counterpartyID
          in: path
          description: ID of counterparty to return
          required: true
          schema:
            type: string
            format: ULID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Counterparty'
        '400':
          description: Invalid input
        '422':
          description: Validation exception or missing field
    delete:
      tags:
        - counterparty
      summary: Deletes a counterparty
      description: Deletes a counterparty
      operationId: deleteCounterparty
      security:
        - bearer-auth: [ ]
      parameters:
        - name: counterpartyID
          in: path
          description: ID of counterparty to return
          required: true
          schema:
            type: string
            format: ULID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        '404':
          description: Account not found
components:
  schemas:
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: c44d81ec-7c2d-4372-8844-28fdb6b1c664
        source:
          type: string
        status:
          type: string
        counterparty:
          type: string
        counterparty_id:
          type: string
          format: ulid
        originator:
          type: string
        originator_address:
          type: string
        beneficiary:
          type: string
        beneficiary_address:
          type: string
        virtual_asset:
          type: string
        amount:
          type: number
          format: double
        last_update:
          type: string
          format: date-time
        envelope_count:
          type: integer
          format: int64
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
    TransactionsList:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageQuery'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    Envelope:
      type: object
      properties:
        envelope_id:
          type: string
        error:
          $ref: '#/components/schemas/Rejection'
        identity:
          $ref: '#/components/schemas/IdentityPayload'
        transaction:
          $ref: '#/components/schemas/Transaction'
        pending:
          $ref: '#/components/schemas/Pending'
        sent_at:
          type: string
          format: date-time
        received_at:
          type: string
          format: date-time
    Pending:
      type: object
      properties:
        envelope_id:
          type: string
        received_by:
          type: string
        received_at:
          type: string
          format: date-time
        message:
          type: string
        reply_not_after:
          type: string
          format: date-time
        reply_not_before:
          type: string
          format: date-time
        extra_json:
          type: string
        transaction:
          $ref: '#/components/schemas/Transaction'
    SecureEnvelope:
      type: object
      properties:
        id:
          type: string
          format: ULID
        direction:
          type: string
          enum:
            - incoming
            - outgoing
        envelope_id:
          type: string
          format: UUID
        payload:
          type: string
          format: base64
        encryption_key:
          type: string
          format: base64
        encryption_algorithm:
          type: string
          example: AES-GCM-256
        valid_hmac:
          type: boolean
        hmac:
          type: string
          format: base64
        hmac_secret:
          type: string
          format: base64
        hmac_algorithm:
          type: string
          example: HMAC-SHA-256
        is_error:
          type: boolean
        error:
          type: object
        timestamp:
          type: string
          format: datetime
        sealed:
          type: boolean
        public_key_signature:
          type: string
        original:
          type: string
          format: base64
    DecryptedEnvelope:
      type: object
      properties:
        identity:
          type: object
        transaction:
          type: object
        pending:
          type: object
        sent_at:
          type: string
          format: datetime
        received_at:
          type: string
          format: datetime
    EnvelopeQuery:
      type: object
      properties:
        decrypt:
          type: boolean
          default: false
        archives:
          type: boolean
          default: false
    EnvelopesList:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageQuery'
        is_decrypted:
          type: boolean
        secure_envelopes:
          type: array
          items:
            $ref: '#/components/schemas/SecureEnvelope'
        decrypted_envelopes:
          type: array
          items:
            $ref: '#/components/schemas/DecryptedEnvelope'
    Counterparty:
      type: object
      properties:
        id:
          type: string
          format: ULID
          example: 01HV1GBK4JG9KF8RHJG2KF0B9M
        source:
          type: string
          readOnly: true
          enum:
            - user
            - gds
        directory_id:
          type: string
          format: UUID
          example: af0e1286-a2a1-40b1-989a-dd5b75fdfbf3
          readOnly: true
        registered_directory:
          type: string
          example: trisatest.net
          readOnly: true
        protocol:
          type: string
          example: trisa
          enum:
            - trisa
            - trp
        common_name:
          type: string
          format: hostname
          example: trisa.example.com
        endpoint:
          type: string
          format: uri
          example: trisa.example.com:443
        name:
          type: string
          example: AliceVASP
        website:
          type: string
          format: uri
        country:
          type: string
          format: ISO-3166-1 ALPHA-2
        business_category:
          type: string
        vasp_categories:
          type: array
          items:
            type: string
        verified_on:
          type: string
          format: datetime
        ivms101:
          type: object
          description: ivms record
        created:
          type: string
          format: datetime
          readOnly: true
        modified:
          type: string
          format: datetime
          readOnly: true
    CounterpartyList:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageQuery'
        counterparties:
          type: array
          items:
            $ref: '#/components/schemas/Counterparty'
    CryptoAddress:
      type: object
      properties:
        id:
          type: string
          format: ULID
          example: 01HSNQWH856KKB2PFXEF4XJQWY
        crypto_address:
          type: string
          example: 18dlice0aYQesEaFs3XuLHBXGoCyhjjHin
        network:
          type: string
          format: SLIP-0044
          example: BTC
          externalDocs:
            description: SLIP-0044 Definitions
            url: https://github.com/satoshilabs/slips/blob/master/slip-0044.md
        asset_type:
          type: string
          description: crypto asset type for multi-asset chains
        tag:
          type: string
          description: tag or memo for chains that require one
        created:
          type: string
          format: datetime
        modified:
          type: string
          format: datetime
    CryptoAddressList:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageQuery'
        crypto_addresses:
          type: array
          items:
            $ref: '#/components/schemas/CryptoAddress'
    Account:
      type: object
      properties:
        id:
          type: string
          format: ULID
          example: 01HSNQWH856KKB2PFXEF4XJQWY
          description: node-specific identifier
        customer_id:
          type: string
          description: VASP identifier for customer account
        first_name:
          type: string
          example: Jane
          description: Given or first name of customer
        last_name:
          type: string
          example: Doe
          description: Family or last name of customer
        crypto_addresses:
          type: array
          items:
            $ref: '#/components/schemas/CryptoAddress'
        created:
          type: string
          format: datetime
        modified:
          type: string
          format: datetime
    AccountList:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageQuery'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    Reply:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: could not complete requested operation
        version:
          type: string
          format: semver
          example: 1.0.0
    StatusReply:
      type: object
      properties:
        status:
          type: string
          example: ok
          enum:
            - ok
            - not ready
            - unhealthy
            - maintenance
        uptime:
          type: string
          format: duration
          example: 25h33m29.4860s
        version:
          type: string
          format: semver
          example: 1.0.0
    PageQuery:
      type: object
      properties:
        page_size:
          type: integer
          format: int32
          example: 50
          default: 100
        next_page_token:
          type: string
          format: base64
        prev_page_token:
          type: string
          format: base64
    Rejection:
      type: object
      properties:
        code:
          type: string
          enum:
            - REJECTED
            - UNKNOWN_WALLET_ADDRESS
            - UNKNOWN_IDENTITY
            - UNKNOWN_ORIGINATOR
            - UNKNOWN_BENEFICIARY
            - UNSUPPORTED_CURRENCY
            - EXCEEDED_TRADING_VOLUME
            - COMPLIANCE_CHECK_FAIL
            - NO_COMPLIANCE
            - HIGH_RISK
            - OUT_OF_NETWORK
            - UNPARSEABLE_IDENTITY
            - UNPARSEABLE_TRANSACTION
            - MISSING_FIELDS
            - INCOMPLETE_IDENTITY
          description: TRISA error codes. For a complete list of error codes, visit https://trisa.dev/api/errors/index.html
        message:
          type: string
        request_retry:
          type: boolean
    Prepare:
      type: object
      properties:
        travel_address:
          type: string
        originator:
          $ref: '#/components/schemas/Person'
        beneficiary:
          $ref: '#/components/schemas/Person'
        transfer:
          $ref: '#/components/schemas/Transfer'
    Prepared:
      type: object
      properties:
        travel_address:
          type: string
        identity:
          $ref: '#/components/schemas/IdentityPayload'
        transaction:
          $ref: '#/components/schemas/Transaction'
    Person:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        customer_id:
          type: string
        addr_line_1:
          type: string
        addr_line_2:
          type: string
        city:
          type: string
        state:
          type: string
        post_code:
          type: string
        country:
          type: string
        crypto_address:
          type: string
    Transfer:
      type: object
      properties:
        amount:
          type: number
          format: double
        network:
          type: string
        asset_type:
          type: string
        transaction_id:
          type: string
        tag:
          type: string
    IdentityPayload:
      type: object
      properties:
        originator:
          $ref: '#/components/schemas/Originator'
        beneficiary:
          $ref: '#/components/schemas/Beneficiary'
        originating_vasp:
          $ref: '#/components/schemas/OriginatingVasp'
        beneficiary_vasp:
          $ref: '#/components/schemas/BeneficiaryVasp'
        transfer_path:
          $ref: '#/components/schemas/TransferPath'
        payload_metadata:
          $ref: '#/components/schemas/PayloadMetadata'
    Originator:
      type: object
      properties:
        originator_persons:
          type: array
          items:
            $ref: '#/components/schemas/Person'
        account_numbers:
          type: array
          items:
            type: string
    Beneficiary:
      type: object
      properties:
        beneficiary_persons:
          type: array
          items:
            $ref: '#/components/schemas/Person'
        account_numbers:
          type: array
          items:
            type: string
    OriginatingVasp:
      type: object
      properties:
        originating_vasp:
          $ref: '#/components/schemas/Person'
    BeneficiaryVasp:
      type: object
      properties:
        beneficiary_vasp:
          $ref: '#/components/schemas/Person'
    IntermediaryVasp:
      type: object
      properties:
        intermediary_vasp:
          $ref: '#/components/schemas/Person'
        sequence:
          type: integer
    TransferPath:
      type: object
      properties:
        transfer_path:
          type: array
          items:
            $ref: '#/components/schemas/IntermediaryVasp'
    PayloadMetadata:
      type: object
      properties:
        transliteration_method:
          type: array
          items:
            $ref: '#/components/schemas/TransliterationMethodCode'
    TransliterationMethodCode:
      type: string
      enum:
        - TRANSLITERATION_METHOD_CODE_OTHR
        - TRANSLITERATION_METHOD_CODE_ARAB
        - TRANSLITERATION_METHOD_CODE_ARAN
        - TRANSLITERATION_METHOD_CODE_ARMN
        - TRANSLITERATION_METHOD_CODE_CYRL
        - TRANSLITERATION_METHOD_CODE_DEVA
        - TRANSLITERATION_METHOD_CODE_GEOR
        - TRANSLITERATION_METHOD_CODE_GREK
        - TRANSLITERATION_METHOD_CODE_HANI
        - TRANSLITERATION_METHOD_CODE_HEBR
        - TRANSLITERATION_METHOD_CODE_KANA
        - TRANSLITERATION_METHOD_CODE_KORE
        - TRANSLITERATION_METHOD_CODE_THAI
      description: Identifies the national script from which transliteration to Latin script is applied.
  requestBodies:
    Account:
      description: Account that needs to be added or updated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
    CryptoAddress:
      description: CryptoAddress associated with account that needs to be added or updated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CryptoAddress'
  securitySchemes:
    bearer-auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
  - url: http://localhost:8000
    variables: { }
    description: Local Development Server
