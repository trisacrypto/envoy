/*
Application code for the /apikeys dashboard page.
*/

import { createList, createPageSizeSelect } from '../modules/components.js';
import { isRequestFor, isRequestMatch } from '../htmx/helpers.js';

/*
Specialized add alerts function for the API key modals.

TODO: consider refactoring this into a more general alerts class.
*/
function alertError(id, title, message) {
  const alerts = document.getElementById(id);
  alerts.insertAdjacentHTML('beforeend', `
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
      <strong>${title}</strong> ${message}.
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
  `);
}

/*
In the create apikey modal form, toggle all permissions checkboxes on or off depending
on the state of the full permissions checkbox (styled as a switch).
*/
function toggleFullPermissions(on) {
  const help = document.getElementById('fullPermissionsHelp');
  help.innerText = on ? 'all permissions selected' : 'specify individual permissions';

  const permissions = document.getElementsByName('permissions');
  permissions.forEach(permission => {
    permission.checked = on;
    permission.disabled = on;
  });
}

/*
Called on create apikey form reset, this sets the full permissions checkbox to off
and resets all permissions checkboxes to off (not checked).
*/
function resetPermissionsCheckboxes() {
  // Reset full permissions checkbox and permissions checkboxes
  const fullPermissions = document.getElementById('fullPermissions');
  fullPermissions.checked = false;
  toggleFullPermissions(false);
}

/*
When the apikey created modal is returned from htmx, this function registers the
click events to the copy buttons to copy the client ID and secret to the clipboard.
*/
function activateCopyButtons() {
  const btns = document.querySelectorAll('[data-clipboard-target]');
  btns.forEach(btn => {
    btn.addEventListener('click', function() {
      const target = btn.dataset.clipboardTarget;
      const value = document.querySelector(target).value;
      navigator.clipboard.writeText(value)
        .then(() => {
          btn.classList.add('btn-success');
          btn.classList.remove('btn-outline-secondary');
          btn.innerHTML = '<i class="fe fe-clipboard"></i>';
        })
        .catch(() => {
          btn.classList.add('btn-danger');
          btn.classList.remove('btn-outline-secondary');
          btn.innerHTML = '<i class="fe fe-x-octagon"></i>';
        })
        .finally(() => {
          setTimeout(() => {
            btn.classList.remove('btn-success', 'btn-danger');
            btn.classList.add('btn-outline-secondary');
            btn.innerHTML = '<i class="fe fe-copy"></i>';
          }, 500);
        });
    });
  });
}

/*
Pre-flight request configuration for htmx requests.
*/
document.body.addEventListener("htmx:configRequest", function(e) {
  /*
  When creating an API key, the permissions from the checkboxes must be gathered and
  stored as an array of strings in the FormData object. The custom json-enc extension
  can then turn this into an array of strings as required by the backend. This hack is
  required because htmx v2 does not support multiple parameters with the same name.
  */
  if (isRequestFor(e, "/v1/apikeys", "post")) {
    let permissions = Array.from(document.getElementsByName('permissions'))
      .filter(permission => permission.checked)
      .map(permission => permission.value);

    const params = new FormData();
    params.append("description", e.detail.parameters.get("description"));
    for (const permission of permissions) {
      params.append("permissions", permission);
    }

    e.detail.parameters = params;
  }
});

/*
Post-event handling after htmx has settled the DOM.
*/
document.body.addEventListener("htmx:afterSettle", function(e) {
  /*
  Whenever the apikey list is refreshed, make sure the pagination and list controls are
  re-initialized since the list table is coming from the HTMX request.
  */
  if (isRequestFor(e, "/v1/apikeys", "get")) {
    // Initialize List.js
    const cpList = document.getElementById('apikeyList');
    const list = createList(cpList);

    // Initialize Page Size Select
    const pageSizeSelect = document.getElementById('pageSizeSelect');
    createPageSizeSelect(pageSizeSelect, list);
    return;
  }

  /*
  After creating an apikey, close the create apikey modal and display the apikey
  created modal generated by the htmx request (activating the new DOM elements).
  */
  if(isRequestFor(e, "/v1/apikeys", "post")) {
    // Close and reset the create API key modal, then open the created modal.
    const createAPIKeyForm = document.getElementById("createAPIKeyForm");
    createAPIKeyForm.reset();

    const createAPIKeyModal = Modal.getInstance(document.getElementById("createAPIKeyModal"));
    createAPIKeyModal.hide();

    activateCopyButtons();

    const apiKeyCreatedModal = new Modal("#apiKeyCreatedModal", {});
    apiKeyCreatedModal.show();

    return;
  }

  // After fetching the preview form, display the apikeyEditModal.
  if (isRequestMatch(e, /^\/v1\/apikeys\/[0-7][0-9A-HJKMNP-TV-Z]{25}\/edit$/gm, "get")) {
    const apiKeyEditModal = new Modal("#apiKeyEditModal", {});
    apiKeyEditModal.show();
    return;
  }

  // After fetching the apikey detail, display the apiKeyDetailModal.
  if (isRequestMatch(e, /^\/v1\/apikeys\/[0-7][0-9A-HJKMNP-TV-Z]{25}$/gm, "get")) {
    const apiKeyEditModal = new Modal("#apiKeyDetailModal", {});
    apiKeyEditModal.show();
    return;
  }
});

/*
Post-event handling when the apikeys-updated event is fired.
*/
document.body.addEventListener("apikeys-updated", function(e) {
  const elt = e.detail?.elt;
  if (elt) {
    if (elt.id === 'deleteBtn') {
      const confirmRevokeModal = Modal.getInstance(document.getElementById("confirmRevokeModal"));
      confirmRevokeModal.hide();
    }
  }
});

/*
Handle any htmx errors that are not swapped by the htmx config.
*/
document.body.addEventListener("htmx:responseError", function(e) {
  // Handle errors for create API key modal
  if (isRequestFor(e, "/v1/apikeys", "post")) {
    const error = JSON.parse(e.detail.xhr.response);
    switch (e.detail.xhr.status) {
      case 400:
        alertError("createAPIKeyAlerts", "Error:", error.error);
        break;
      case 422:
        alertError("createAPIKeyAlerts", "Validation error:", error.error);
        break;
      default:
        break;
    }
    return;
  }

  // Handle errors for edit API key modal
  if (isRequestMatch(e, "/v1/apikeys/[0-7][0-9A-HJKMNP-TV-Z]{25}", "put")) {
    const error = JSON.parse(e.detail.xhr.response);
    switch (e.detail.xhr.status) {
      case 400:
        alertError("editAPIKeyAlerts", "Error:", error.error);
        break;
      case 422:
        alertError("editAPIKeyAlerts", "Validation error:", error.error);
        break;
      default:
        break;
    }
    return;
  }

  // Handle errors for revoke API key modal
  if (isRequestMatch(e, "/v1/apikeys/[0-7][0-9A-HJKMNP-TV-Z]{25}", "delete")) {
    window.location.href = '/error';
    return;
  }

  // Handle errors for the detail and preview modals
  if (isRequestMatch(e, /^\/v1\/apikeys\/[0-7][0-9A-HJKMNP-TV-Z]{25}(\/edit)?$/gm, "get")) {
    if (e.detail.xhr.status === 404) {
      window.location.href = '/not-found';
    } else {
      window.location.href = '/error';
    }
    return;
  }

  // If the error is unhandled; throw it
  throw new Error(`unhandled htmx error: status ${e.detail.xhr.status}`);
});

/*
Listen for changes to the full permissions toggle in the create apikey modal.
*/
const fullPermissionsToggle = document.getElementById('fullPermissions');
if (fullPermissionsToggle) {
  fullPermissionsToggle.addEventListener('change', function() {
    toggleFullPermissions(fullPermissionsToggle.checked);
  });
}

/*
Ensure the create api key form is fully reset; including all checkboxes, switches,
and removing any alerts that may have been added from errors.
*/
const createAPIKeyForm = document.getElementById('createAPIKeyForm');
if (createAPIKeyForm) {
  createAPIKeyForm.addEventListener('reset', function() {
    const alerts = document.getElementById('createAPIKeyAlerts');
    alerts.querySelector('.alert')?.remove();

    resetPermissionsCheckboxes();
  });
}

/*
When the apikey created confirmation modal is closed, remove all of the HTML from it.
This has the effect of removing the client secret from the DOM, which feels like a
prudent thing to do and prevent XSS.
*/
const apiKeyCreatedModal = document.getElementById('apiKeyCreatedModal');
if (apiKeyCreatedModal) {
  apiKeyCreatedModal.addEventListener('hidden.bs.modal', function() {
    apiKeyCreatedModal.innerHTML = '';
  });
}

/*
When the revoke button is pressed in the list, show the modal and populate the modal
contents with the data attributes from the row in the table. When the modal is hidden,
make sure the modal is reset to its previous ready state.
*/
const confirmRevokeModal = document.getElementById('confirmRevokeModal');
if (confirmRevokeModal) {
  confirmRevokeModal.addEventListener('show.bs.modal', function(event) {
    const button = event.relatedTarget;
    confirmRevokeModal.querySelector("#clientID").value = button.dataset.bsClientId;
    confirmRevokeModal.querySelector("#description").value = button.dataset.bsDescription;

    const deleteBtn = confirmRevokeModal.querySelector("#deleteBtn")
    deleteBtn.setAttribute("hx-delete", "/v1/apikeys/" + button.dataset.bsKeyId);
    htmx.process(deleteBtn);
  });

  confirmRevokeModal.addEventListener('hidden.bs.modal', function(event) {
    confirmRevokeModal.querySelector("#clientID").value = "";
    confirmRevokeModal.querySelector("#description").value = "";

    const deleteBtn = confirmRevokeModal.querySelector("#deleteBtn")
    deleteBtn.removeAttribute("hx-delete");
    htmx.process(deleteBtn);
  });
}