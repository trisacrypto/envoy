/*
Application code for the user management dashboard page.
*/

import { createList, createPageSizeSelect, activateCopyButtons } from '../modules/components.js';
import { isRequestFor, isRequestMatch } from '../htmx/helpers.js';


/*
Post-event handling after htmx has settled the DOM.
*/
document.addEventListener("htmx:afterSettle", function(e) {
  /*
  Whenever the apikey list is refreshed, make sure the pagination and list controls are
  re-initialized since the list table is coming from the HTMX request.
  */
  if (isRequestFor(e, "/v1/users", "get")) {
    const cpList = document.getElementById('userList');
    const list = createList(cpList);

    // Initialize Page Size Select
    const pageSizeSelect = document.getElementById('pageSizeSelect');
    createPageSizeSelect(pageSizeSelect, list);
    return;
  };

  /*
  After creating a user, close the create user modal and display the user
  created modal generated by the htmx request (activating the new DOM elements).
  */
  if(isRequestFor(e, "/v1/users", "post")) {
    // Close and reset the create user key modal, then open the created modal.
    const createAPIKeyForm = document.getElementById("createUserForm");
    createAPIKeyForm.reset();

    const createAPIKeyModal = Modal.getInstance(document.getElementById("createUserModal"));
    createAPIKeyModal.hide();

    activateCopyButtons();

    const apiKeyCreatedModal = new Modal("#userCreatedModal", {});
    apiKeyCreatedModal.show();

    return;
  }

});

/*
Post-event handling when the users-updated event is fired.
*/
document.body.addEventListener("users-updated", function(e) {
  const elt = e.detail?.elt;
  if (elt) {
    if (elt.id === 'deleteBtn') {
      const confirmRevokeModal = Modal.getInstance(document.getElementById("confirmDeleteUserModal"));
      confirmRevokeModal.hide();
    }
  }
});

/*
Handle any htmx errors that are not swapped by the htmx config.
*/
document.body.addEventListener("htmx:responseError", function(e) {
  // Handle errors for create API key modal
  if (isRequestFor(e, "/v1/users", "post")) {
    const error = JSON.parse(e.detail.xhr.response);
    switch (e.detail.xhr.status) {
      case 400:
        alertError("createUserAlerts", "Error:", error.error);
        break;
      case 422:
        alertError("createUserAlerts", "Validation error:", error.error);
        break;
      default:
        break;
    }
    return;
  }

  // If the error is unhandled; throw it
  throw new Error(`unhandled htmx error: status ${e.detail.xhr.status}`);
});

/*
When the user created confirmation modal is closed, remove all of the HTML from it.
This has the effect of removing the user's password from the DOM, which feels like a
prudent thing to do and prevent XSS.
*/
const userCreatedModal = document.getElementById('userCreatedModal');
if (userCreatedModal) {
  userCreatedModal.addEventListener('hidden.bs.modal', function() {
    userCreatedModal.innerHTML = '';
  });
}

/*
When the remove button is pressed in the list, show the confirmation modal and populate
the modal contents with the data attributes from the row in the table. When the modal
is hidden, make sure the modal is reset to its previous ready state.
*/
const confirmDeleteUserModal = document.getElementById('confirmDeleteUserModal');
if (confirmDeleteUserModal) {
  confirmDeleteUserModal.addEventListener('show.bs.modal', function(event) {
    const button = event.relatedTarget;
    confirmDeleteUserModal.querySelector("#delUserName").value = button.dataset.bsName;
    confirmDeleteUserModal.querySelector("#delUserEmail").value = button.dataset.bsEmail;

    const deleteBtn = confirmDeleteUserModal.querySelector("#deleteBtn")
    deleteBtn.setAttribute("hx-delete", "/v1/users/" + button.dataset.bsUserId);
    htmx.process(deleteBtn);
  });

  confirmDeleteUserModal.addEventListener('hidden.bs.modal', function(event) {
    confirmDeleteUserModal.querySelector("#delUserName").value = "";
    confirmDeleteUserModal.querySelector("#delUserEmail").value = "";

    const deleteBtn = confirmDeleteUserModal.querySelector("#deleteBtn")
    deleteBtn.removeAttribute("hx-delete");
    htmx.process(deleteBtn);
  });
}