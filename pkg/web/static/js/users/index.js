/*
Application code for the user management dashboard page.
*/

import { createList, createPageSizeSelect, activateCopyButtons } from '../modules/components.js';
import { isRequestFor, isRequestMatch } from '../htmx/helpers.js';


/*
Post-event handling after htmx has settled the DOM.
*/
document.addEventListener("htmx:afterSettle", function(e) {
  /*
  Whenever the apikey list is refreshed, make sure the pagination and list controls are
  re-initialized since the list table is coming from the HTMX request.
  */
  if (isRequestFor(e, "/v1/users", "get")) {
    const cpList = document.getElementById('userList');
    const list = createList(cpList);

    // Initialize Page Size Select
    const pageSizeSelect = document.getElementById('pageSizeSelect');
    createPageSizeSelect(pageSizeSelect, list);
    return;
  };

  /*
  After creating a user, close the create user modal and display the user
  created modal generated by the htmx request (activating the new DOM elements).
  */
  if(isRequestFor(e, "/v1/users", "post")) {
    // Close and reset the create user key modal, then open the created modal.
    const createAPIKeyForm = document.getElementById("createUserForm");
    createAPIKeyForm.reset();

    const createAPIKeyModal = Modal.getInstance(document.getElementById("createUserModal"));
    createAPIKeyModal.hide();

    activateCopyButtons();

    const apiKeyCreatedModal = new Modal("#userCreatedModal", {});
    apiKeyCreatedModal.show();

    return;
  }

});

/*
Handle any htmx errors that are not swapped by the htmx config.
*/
document.body.addEventListener("htmx:responseError", function(e) {
  // Handle errors for create API key modal
  if (isRequestFor(e, "/v1/users", "post")) {
    const error = JSON.parse(e.detail.xhr.response);
    switch (e.detail.xhr.status) {
      case 400:
        alertError("createUserAlerts", "Error:", error.error);
        break;
      case 422:
        alertError("createUserAlerts", "Validation error:", error.error);
        break;
      default:
        break;
    }
    return;
  }
});

/*
When the user created confirmation modal is closed, remove all of the HTML from it.
This has the effect of removing the user's password from the DOM, which feels like a
prudent thing to do and prevent XSS.
*/
const userCreatedModal = document.getElementById('userCreatedModal');
if (userCreatedModal) {
  userCreatedModal.addEventListener('hidden.bs.modal', function() {
    userCreatedModal.innerHTML = '';
  });
}