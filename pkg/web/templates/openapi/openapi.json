{
  "info": {
    "title": "TRISA Envoy API",
    "description": "The TRISA Envoy API allows users to interact with their TRISA open source Envoy node in a programmatic fashion. The API allows users to manage server objects such as accounts and counterparties and to send and manage Travel Rule transactions without having to know the details of the TRISA or TRP protocols.",
    "contact": {
      "name": "Rotational Labs",
      "email": "support@rotational.io",
      "url": "https://rotational.io"
    },
    "license": {
      "name": "MIT Licensed",
      "url": "https://github.com/trisacrypto/envoy/blob/main/LICENSE"
    },
    "version": "v{{ .Version }}"
  },
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "{{ .Origin }}",
      "variables": {},
      "description": "{{ .Description }}"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "API authentication is handled using JWT access and refresh tokens that can be obtained with an API key composed of a client ID and secret."
    },
    {
      "name": "Accounts",
      "description": "Accounts store information about your users and their crypto wallets for compliance purposes."
    },
    {
      "name": "Crypto Addresses",
      "description": "A resource nested under accounts for tracking which wallet addresses for which blockchain networks belong to which accounts."
    },
    {
      "name": "Counterparties",
      "description": "Counterparties define remote VASP peers with whom you can exchange Travel Rule information for compliance purposes."
    },
    {
      "name": "Transactions",
      "description": "Transactions refer to an instance of a travel rule information exchange related to a specific on-chain virtual asset transfer."
    },
    {
      "name": "Secure Envelopes",
      "description": "Secure envelopes store PII data in an encrypted fashion and record an audit log of information exchanges with a counterparty about a specific transaction."
    },
    {
      "name": "Users",
      "description": "Envoy user access management and identity control for compliance auditing purposes."
    },
    {
      "name": "API  Keys",
      "description": "Envoy API client access management and identity control for compliance auditing purposes."
    },
    {
      "name": "Utilities",
      "description": "Other useful API methods and helper functionality not associated with a REST resource."
    },
    {
      "name": "Webhooks",
      "description": "Webhooks for making callbacks to an API client system."
    }
  ],
  "externalDocs": {
    "description": "TRISA Documentation",
    "url": "https://trisa.dev"
  },
  "security": [
    {}
  ],
  "components": {
    "schemas": {
      "Reply": {
        "title": "Reply",
        "type": "object",
        "description": "A standard reply object that is used to indicate success with a JSON body if required.",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Set to true if the request was successful, false if there was an error.",
            "example": true
          }
        },
        "example": {
          "success": true
        }
      },
      "ErrorReply": {
        "title": "ErrorReply",
        "type": "object",
        "description": "A general error reply that includes the details of why the request was bad.",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Set to true if the request was successful, false if there was an error (see reply).",
            "example": false
          },
          "error": {
            "type": "string",
            "description": "A short description of the error intended to help the user fix the request and retry.",
            "example": "resource not found"
          }
        },
        "example": {
          "success": false,
          "error": "resource not found"
        }
      },
      "FieldErrors": {
        "title": "FieldErrors",
        "type": "object",
        "description": "A set of errors used to indicate problems with specific fields in the request body.",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Set to true if the request was successful, false if there was an error (see error reply).",
            "example": false
          },
          "errors": {
            "type": "array",
            "description": "A list of the fields and their associated errors.",
            "items": {
              "type": "object",
              "description": "An individual field error that specifies the name of the field and the validation error.",
              "properties": {
                "field": {
                  "type": "string",
                  "description": "The name of the field in the request body (may be \".\" delimited to indicate nested fields).",
                  "example": "country"
                },
                "error": {
                  "type": "string",
                  "description": "A brief description of the validation error that occurred.",
                  "example": "not a valid ISO-3166-1 Alpha 2 country code"
                }
              },
              "example": {
                "field": "country",
                "error": "not a valid ISO-3166-1 Alpha 2 country code"
              }
            },
            "example": [
              {
                "field": "common_name",
                "error": "common name must be a valid domain name with a correct tld"
              },
              {
                "field": "country",
                "error": "not a valid ISO-3166-1 Alpha 2 country code"
              }
            ]
          }
        },
        "example": {
          "success": false,
          "errors": [
            {
              "field": "common_name",
              "error": "common name must be a valid domain name with a correct tld"
            },
            {
              "field": "country",
              "error": "not a valid ISO-3166-1 Alpha 2 country code"
            }
          ]
        }
      },
      "PageInfo": {
        "title": "PageInfo",
        "type": "object",
        "description": "The page info for the current page of a paginated list resource.",
        "properties": {
          "page_size": {
            "type": "integer",
            "example": 50,
            "description": "The number of items on the current page, defaults to the page size requested in the page query."
          },
          "next_page_token": {
            "type": "string",
            "format": "base64",
            "description": "An encrypted handle that can be used in a page query to return the next page of results after this current page.",
            "example": "eyJjIjogIjAxSjZESjlGNjkxQ0Y4RTlIMFYzRVQwTTBFIiwgInMiOiA1MCwgImUiOiAxNzI0ODgyOTU4fQ=="
          },
          "prev_page_token": {
            "type": "string",
            "format": "base64",
            "description": "An encrypted handle that can be used in a page query to return the previous page of results after this current page.",
            "example": "eyJjIjogIjAxSjZESjlGNjkxQ0Y4RTlIMFYzRVQwTTBFIiwgInMiOiA1MCwgImUiOiAxNzI0ODgyOTU4fQ=="
          }
        },
        "example": {
          "page_size": 50,
          "next_page_token": "eyJjIjogIjAxSjZESjlGNjkxQ0Y4RTlIMFYzRVQwTTBFIiwgInMiOiA1MCwgImUiOiAxNzI0ODgyOTU4fQ=="
        }
      },
      "APIAuthentication": {
        "title": "APIAuthentication",
        "type": "object",
        "description": "Authenticate an API Key using its client ID and secret to receive a JWT bearer token.",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "The client ID of the API Key for authentication.",
            "example": "kbxiRmtYvLbkYKrlefJoSP"
          },
          "client_secret": {
            "type": "string",
            "description": "The client secret of the API Key for authentication.",
            "example": "R4OTqjvlGj02x4PvoPe6bxTopFjQ15QrISG8X3HqD5isWIng"
          }
        },
        "required": [
          "client_id",
          "client_secret"
        ],
        "example": {
          "client_id": "kbxiRmtYvLbkYKrlefJoSP",
          "client_secret": "R4OTqjvlGj02x4PvoPe6bxTopFjQ15QrISG8X3HqD5isWIng"
        }
      },
      "LoginReply": {
        "title": "LoginReply",
        "type": "object",
        "description": "Returns two JWT tokens. The access token should be used as a Bearer token in the Authorization header. The refresh token can be used to obtain a new access token when it expires to reauthenticate without having to post the client ID and secret again.",
        "properties": {
          "access_token": {
            "type": "string",
            "format": "JWT",
            "description": "The access token with API key claims that should be used as the Bearer token in the Authorization header.",
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjAxSFZINTBWWEs5MFJKWlI5WENNMENCRkJRIiwidHlwIjoiSldUIn0.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAiLCJzdWIiOiJrMDFKNVkyUjBZQUZFU0ZUVzYzU1JTNTg4WjIiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo4MDAwIl0sImV4cCI6MTcyNDg4NjU1OCwibmJmIjoxNzI0ODgyOTU4LCJpYXQiOjE3MjQ4ODI5NTgsImp0aSI6IjAxSjZER0pFMFExMEcwQzY1U1NEUlQ3VDY3IiwiY2xpZW50SUQiOiJrYnhpUm10WXZMYmtZS3JsZWZKb1NQIiwicGVybWlzc2lvbnMiOlsidXNlcnM6bWFuYWdlIiwidXNlcnM6dmlldyIsImFwaWtleXM6bWFuYWdlIiwiYXBpa2V5czp2aWV3IiwiYXBpa2V5czpyZXZva2UiLCJjb3VudGVycGFydGllczptYW5hZ2UiLCJjb3VudGVycGFydGllczp2aWV3IiwiYWNjb3VudHM6bWFuYWdlIiwiYWNjb3VudHM6dmlldyIsInRyYXZlbHJ1bGU6bWFuYWdlIiwidHJhdmVscnVsZTpkZWxldGUiLCJ0cmF2ZWxydWxlOnZpZXciLCJjb25maWc6bWFuYWdlIiwiY29uZmlnOnZpZXciLCJwa2k6bWFuYWdlIiwicGtpOmRlbGV0ZSIsInBraTp2aWV3Il19.vZeoZ6UR9e2qOU2Zd64nlnPne4Hbm3t8QtX_uM72pyf8BRIEehruioQCQ8RfqNJpSyacRCfhAKovTKChnWIPd8Xdkzcl9_bHnhYKlTzhdPYlD5K1uCNkNSJHZVwEJeG3aHB7xE-MVrvXivia3xHfth_ZSQab3jVuL6q_fjG4yPNpf3yjXbO3OPaGpavcElMf2r-DdIMIIewCmNktjrkFNtiNPmJU3MzLzwxLQPm2WUkcKZ27e7KD_LL2ZgluyVSM0BRehcdkPXmOXGF5KCTvHu7Xo5evUg6DvftEIz5IjCd-6s1YkZEJSQqBlfymhXXsmW1tlK4RYhay10Lg_k16HtO-kByLB2vtW6V1090XBK6tvjAJNjSGrD2tTFWbRlEe2YdYQ3pQilnSeJW1hBSpSYb_Ty94FwcsMrq_NiULYmxh6dOYtzrANou0EKd0HoYjw4d0dQOlCqSBfFclOoMmftjms5QG6E93s_Bjp2nhpKs6fr7TQhwmVChiVWBV2eq5s1mTLngNQhgLdNddcDJ_DJiisSv_V3nD-2uLcQaq9ZQ60oW1jQzUoTaJY9uw3SEToUa7bGRNKmHnUYYxRxqyVVYceaOlklPqfyT58zEBKqblhZfAE39rtyVZKOCc3x_d9yyQ9YaV6ijpaxC0PKTW0tSEWzNesNv4wayH-pNaSJM"
          },
          "refresh_token": {
            "type": "string",
            "format": "JWT",
            "description": "The refresh token can be used to re-authenticate an expired access token, so long as the refresh token is still valid.",
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjAxSFZINTBWWEs5MFJKWlI5WENNMENCRkJRIiwidHlwIjoiSldUIn0.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAiLCJzdWIiOiJrMDFKNVkyUjBZQUZFU0ZUVzYzU1JTNTg4WjIiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo4MDAwIiwiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3YxL3JlYXV0aGVudGljYXRlIl0sImV4cCI6MTcyNDg5MDE1OCwibmJmIjoxNzI0ODg1NjU4LCJpYXQiOjE3MjQ4ODI5NTgsImp0aSI6IjAxSjZER0pFMFExMEcwQzY1U1NEUlQ3VDY3In0.Mzey5MWS-GRVhVAfISXH6keebNpoQTYWUVDhOnD-mENfWNurtkBpWMgV_FivpAHyXlH72Mv-cC0oaaUMYNMVRg5yCN6XQyYdUqcZsynULLkUUPcD7PGJLDIMe8CngAHITDmDRzdZaUpbWB4F-Ad_qEqzGhz3-PRAQxM7-Gt3IFNFVfWHJXTZzAiKHP_xtE4rnVczUx2sMXKPQHhxDVTiahMSAGiMVUWvnfKzwtv36U69cmfOw3UbG2IVZ6-2zm8ICSNesUqtwpjn1c5B_pYoqJNJYbp8jCzjRS2xT4xT7eDmMAjeFIiJEe6wuTvzU3ZwwqsXhLPtj27VNwHNHHL2qqnn0wTLx30amHkrBoEU44Rbf9Lxof6y_WDhZJIt7SeG1bDZ378falQd0v5yTColbaTk20jlADsoSdm8IgYoH91k1_-bzfHQkRTNUQI7YxCQWeP9zj-QzKdA7c86gyvYuPbsk29St0tGvQdS-aWa5ZLpDL3R5OLzO9zhqgNeGQVomF5YJaFAaBe4Y_6dyvNmHJB9cdfgEgj6B9cTzKdZWfn-r48E3xt0n41FdvYKgyDjR1gRBe7T-f55GbH5N0fR2Twdclc4DqD5c2gp5U0BTK-Uc2OBdT710Ws6mqdVljKoaG6VZjI-eA17pv7Khzdr8NWpmSUMYUGbAKtHFA7atsc"
          }
        },
        "example": {
          "access_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjAxSFZINTBWWEs5MFJKWlI5WENNMENCRkJRIiwidHlwIjoiSldUIn0.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAiLCJzdWIiOiJrMDFKNVkyUjBZQUZFU0ZUVzYzU1JTNTg4WjIiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo4MDAwIl0sImV4cCI6MTcyNDg4NjU1OCwibmJmIjoxNzI0ODgyOTU4LCJpYXQiOjE3MjQ4ODI5NTgsImp0aSI6IjAxSjZER0pFMFExMEcwQzY1U1NEUlQ3VDY3IiwiY2xpZW50SUQiOiJrYnhpUm10WXZMYmtZS3JsZWZKb1NQIiwicGVybWlzc2lvbnMiOlsidXNlcnM6bWFuYWdlIiwidXNlcnM6dmlldyIsImFwaWtleXM6bWFuYWdlIiwiYXBpa2V5czp2aWV3IiwiYXBpa2V5czpyZXZva2UiLCJjb3VudGVycGFydGllczptYW5hZ2UiLCJjb3VudGVycGFydGllczp2aWV3IiwiYWNjb3VudHM6bWFuYWdlIiwiYWNjb3VudHM6dmlldyIsInRyYXZlbHJ1bGU6bWFuYWdlIiwidHJhdmVscnVsZTpkZWxldGUiLCJ0cmF2ZWxydWxlOnZpZXciLCJjb25maWc6bWFuYWdlIiwiY29uZmlnOnZpZXciLCJwa2k6bWFuYWdlIiwicGtpOmRlbGV0ZSIsInBraTp2aWV3Il19.vZeoZ6UR9e2qOU2Zd64nlnPne4Hbm3t8QtX_uM72pyf8BRIEehruioQCQ8RfqNJpSyacRCfhAKovTKChnWIPd8Xdkzcl9_bHnhYKlTzhdPYlD5K1uCNkNSJHZVwEJeG3aHB7xE-MVrvXivia3xHfth_ZSQab3jVuL6q_fjG4yPNpf3yjXbO3OPaGpavcElMf2r-DdIMIIewCmNktjrkFNtiNPmJU3MzLzwxLQPm2WUkcKZ27e7KD_LL2ZgluyVSM0BRehcdkPXmOXGF5KCTvHu7Xo5evUg6DvftEIz5IjCd-6s1YkZEJSQqBlfymhXXsmW1tlK4RYhay10Lg_k16HtO-kByLB2vtW6V1090XBK6tvjAJNjSGrD2tTFWbRlEe2YdYQ3pQilnSeJW1hBSpSYb_Ty94FwcsMrq_NiULYmxh6dOYtzrANou0EKd0HoYjw4d0dQOlCqSBfFclOoMmftjms5QG6E93s_Bjp2nhpKs6fr7TQhwmVChiVWBV2eq5s1mTLngNQhgLdNddcDJ_DJiisSv_V3nD-2uLcQaq9ZQ60oW1jQzUoTaJY9uw3SEToUa7bGRNKmHnUYYxRxqyVVYceaOlklPqfyT58zEBKqblhZfAE39rtyVZKOCc3x_d9yyQ9YaV6ijpaxC0PKTW0tSEWzNesNv4wayH-pNaSJM",
          "refresh_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjAxSFZINTBWWEs5MFJKWlI5WENNMENCRkJRIiwidHlwIjoiSldUIn0.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAiLCJzdWIiOiJrMDFKNVkyUjBZQUZFU0ZUVzYzU1JTNTg4WjIiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo4MDAwIiwiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3YxL3JlYXV0aGVudGljYXRlIl0sImV4cCI6MTcyNDg5MDE1OCwibmJmIjoxNzI0ODg1NjU4LCJpYXQiOjE3MjQ4ODI5NTgsImp0aSI6IjAxSjZER0pFMFExMEcwQzY1U1NEUlQ3VDY3In0.Mzey5MWS-GRVhVAfISXH6keebNpoQTYWUVDhOnD-mENfWNurtkBpWMgV_FivpAHyXlH72Mv-cC0oaaUMYNMVRg5yCN6XQyYdUqcZsynULLkUUPcD7PGJLDIMe8CngAHITDmDRzdZaUpbWB4F-Ad_qEqzGhz3-PRAQxM7-Gt3IFNFVfWHJXTZzAiKHP_xtE4rnVczUx2sMXKPQHhxDVTiahMSAGiMVUWvnfKzwtv36U69cmfOw3UbG2IVZ6-2zm8ICSNesUqtwpjn1c5B_pYoqJNJYbp8jCzjRS2xT4xT7eDmMAjeFIiJEe6wuTvzU3ZwwqsXhLPtj27VNwHNHHL2qqnn0wTLx30amHkrBoEU44Rbf9Lxof6y_WDhZJIt7SeG1bDZ378falQd0v5yTColbaTk20jlADsoSdm8IgYoH91k1_-bzfHQkRTNUQI7YxCQWeP9zj-QzKdA7c86gyvYuPbsk29St0tGvQdS-aWa5ZLpDL3R5OLzO9zhqgNeGQVomF5YJaFAaBe4Y_6dyvNmHJB9cdfgEgj6B9cTzKdZWfn-r48E3xt0n41FdvYKgyDjR1gRBe7T-f55GbH5N0fR2Twdclc4DqD5c2gp5U0BTK-Uc2OBdT710Ws6mqdVljKoaG6VZjI-eA17pv7Khzdr8NWpmSUMYUGbAKtHFA7atsc"
        }
      },
      "ReauthenticateRequest": {
        "title": "ReauthenticateRequest",
        "type": "object",
        "description": "Reauthenticate an expired `access_token` to receive a new access token without having to authenticate with your API key credentials.",
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "The JWT refresh token for re-authentication",
            "format": "JWT",
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjAxSFZINTBWWEs5MFJKWlI5WENNMENCRkJRIiwidHlwIjoiSldUIn0.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAiLCJzdWIiOiJrMDFKNVkyUjBZQUZFU0ZUVzYzU1JTNTg4WjIiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo4MDAwIiwiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3YxL3JlYXV0aGVudGljYXRlIl0sImV4cCI6MTcyNDg5MDE1OCwibmJmIjoxNzI0ODg1NjU4LCJpYXQiOjE3MjQ4ODI5NTgsImp0aSI6IjAxSjZER0pFMFExMEcwQzY1U1NEUlQ3VDY3In0.Mzey5MWS-GRVhVAfISXH6keebNpoQTYWUVDhOnD-mENfWNurtkBpWMgV_FivpAHyXlH72Mv-cC0oaaUMYNMVRg5yCN6XQyYdUqcZsynULLkUUPcD7PGJLDIMe8CngAHITDmDRzdZaUpbWB4F-Ad_qEqzGhz3-PRAQxM7-Gt3IFNFVfWHJXTZzAiKHP_xtE4rnVczUx2sMXKPQHhxDVTiahMSAGiMVUWvnfKzwtv36U69cmfOw3UbG2IVZ6-2zm8ICSNesUqtwpjn1c5B_pYoqJNJYbp8jCzjRS2xT4xT7eDmMAjeFIiJEe6wuTvzU3ZwwqsXhLPtj27VNwHNHHL2qqnn0wTLx30amHkrBoEU44Rbf9Lxof6y_WDhZJIt7SeG1bDZ378falQd0v5yTColbaTk20jlADsoSdm8IgYoH91k1_-bzfHQkRTNUQI7YxCQWeP9zj-QzKdA7c86gyvYuPbsk29St0tGvQdS-aWa5ZLpDL3R5OLzO9zhqgNeGQVomF5YJaFAaBe4Y_6dyvNmHJB9cdfgEgj6B9cTzKdZWfn-r48E3xt0n41FdvYKgyDjR1gRBe7T-f55GbH5N0fR2Twdclc4DqD5c2gp5U0BTK-Uc2OBdT710Ws6mqdVljKoaG6VZjI-eA17pv7Khzdr8NWpmSUMYUGbAKtHFA7atsc"
          }
        },
        "required": [
          "refresh_token"
        ],
        "example": {
          "refresh_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjAxSFZINTBWWEs5MFJKWlI5WENNMENCRkJRIiwidHlwIjoiSldUIn0.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAiLCJzdWIiOiJrMDFKNVkyUjBZQUZFU0ZUVzYzU1JTNTg4WjIiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo4MDAwIiwiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3YxL3JlYXV0aGVudGljYXRlIl0sImV4cCI6MTcyNDg5MDE1OCwibmJmIjoxNzI0ODg1NjU4LCJpYXQiOjE3MjQ4ODI5NTgsImp0aSI6IjAxSjZER0pFMFExMEcwQzY1U1NEUlQ3VDY3In0.Mzey5MWS-GRVhVAfISXH6keebNpoQTYWUVDhOnD-mENfWNurtkBpWMgV_FivpAHyXlH72Mv-cC0oaaUMYNMVRg5yCN6XQyYdUqcZsynULLkUUPcD7PGJLDIMe8CngAHITDmDRzdZaUpbWB4F-Ad_qEqzGhz3-PRAQxM7-Gt3IFNFVfWHJXTZzAiKHP_xtE4rnVczUx2sMXKPQHhxDVTiahMSAGiMVUWvnfKzwtv36U69cmfOw3UbG2IVZ6-2zm8ICSNesUqtwpjn1c5B_pYoqJNJYbp8jCzjRS2xT4xT7eDmMAjeFIiJEe6wuTvzU3ZwwqsXhLPtj27VNwHNHHL2qqnn0wTLx30amHkrBoEU44Rbf9Lxof6y_WDhZJIt7SeG1bDZ378falQd0v5yTColbaTk20jlADsoSdm8IgYoH91k1_-bzfHQkRTNUQI7YxCQWeP9zj-QzKdA7c86gyvYuPbsk29St0tGvQdS-aWa5ZLpDL3R5OLzO9zhqgNeGQVomF5YJaFAaBe4Y_6dyvNmHJB9cdfgEgj6B9cTzKdZWfn-r48E3xt0n41FdvYKgyDjR1gRBe7T-f55GbH5N0fR2Twdclc4DqD5c2gp5U0BTK-Uc2OBdT710Ws6mqdVljKoaG6VZjI-eA17pv7Khzdr8NWpmSUMYUGbAKtHFA7atsc"
        }
      },
      "Account": {
        "title": "Account",
        "type": "object",
        "description": "An account of a customer whose identity information is required for compliance. Accounts are also associated with crypto wallet addresses.",
        "properties": {
          "id": {
            "type": "string",
            "format": "ULID",
            "description": "The unique identifier of the account on your Envoy node.",
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          },
          "customer_id": {
            "type": "string",
            "description": "An internal customer ID associated with the account that links it to your customer management system.",
            "example": "674907513"
          },
          "first_name": {
            "type": "string",
            "description": "The first or \"secondary\" name of the customer account.",
            "example": "James"
          },
          "last_name": {
            "type": "string",
            "description": "The last or \"primary\" name of the customer account, often a family name. This name is used to sort accounts.",
            "example": "Bond"
          },
          "ivms101": {
            "type": "string",
            "format": "base64",
            "description": "The base64 encoded representation of a JSON or protocol buffer IVMS101 record for the natural person on the account.",
            "example": "CjwKEQoPCgRCb25kEgVKYW1lcxgCKiMKCjE5MjAtMTEtMTESFVdhdHRlbnNjaGVpZCwgR2VybWFueTICR0I"
          },
          "travel_address": {
            "type": "string",
            "format": "TravelAddress",
            "description": "The customer account travel address that allows counterparties to send this account travel rule inquiries.",
            "example": "taLg4sBFp3cWhB9wN7qqPwDzq32bWwhibhFvADbiYp5fMR7asAxbqNrPuUyT4VzZa98oPk6dHcdKhov9jiraNrcZ7yQdikXcwbv"
          },
          "crypto_addresses": {
            "type": "array",
            "description": "A list of crypto addresses associated with the account.",
            "items": {
              "$ref": "#/components/schemas/CryptoAddress"
            },
            "example": []
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the account record was created.",
            "example": "2024-08-28T10:14:43-05:00"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the account record was last modified.",
            "example": "2024-08-28T12:23:24-05:00"
          }
        },
        "example": {
          "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
          "customer_id": "674907513",
          "first_name": "James",
          "last_name": "Bond",
          "travel_address": "taLg4sBFp3cWhB9wN7qqPwDzq32bWwhibhFvADbiYp5fMR7asAxbqNrPuUyT4VzZa98oPk6dHcdKhov9jiraNrcZ7yQdikXcwbv",
          "ivms101": "CjwKEQoPCgRCb25kEgVKYW1lcxgCKiMKCjE5MjAtMTEtMTESFVdhdHRlbnNjaGVpZCwgR2VybWFueTICR0I",
          "crypto_addresses": [
            {
              "id": "01J6FRB1EGJCEZXRMQGW1FM0BR",
              "crypto_address": "0x9268102451DE47C536C3AD92203D4E9692941E06",
              "network": "ETH",
              "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5XP69YEctxHMPwa7YTEU3QjKcC2RY9Jqjd4VsCsj396YMZvVCfFaYjDR7P",
              "created": "2024-08-29T14:05:31-05:00",
              "modified": "2024-08-30T18:39:02-05:00"
            },
            {
              "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
              "crypto_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
              "network": "BTC",
              "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5WTaDe5fEN9vFTCtNxb2bv1HegpR8RcuV4EAhxtvKt8wfx4SnH414o6eWU",
              "created": "2024-08-28T10:14:43-05:00",
              "modified": "2024-08-28T12:23:24-05:00"
            }
          ],
          "created": "2024-08-28T10:14:43-05:00",
          "modified": "2024-08-28T12:23:24-05:00"
        }
      },
      "AccountForm": {
        "title": "AccountForm",
        "type": "object",
        "description": "The editable fields in a customer account object.",
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The internal customer ID can be changed at any time, thought it is not recommended.",
            "example": "674907513"
          },
          "first_name": {
            "type": "string",
            "description": "The first or \"secondary\" name of the customer account can be modified.",
            "example": "James"
          },
          "last_name": {
            "type": "string",
            "description": "The last or \"primary\" name of the customer account, often a family name, can be modified.",
            "example": "Bond"
          },
          "ivms101": {
            "type": "string",
            "format": "base64",
            "description": "The base64 encoded representation of a JSON or protocol buffer IVMS101 record for the natural person on the account can be modified but must be parseable.",
            "example": "CjwKEQoPCgRCb25kEgVKYW1lcxgCKiMKCjE5MjAtMTEtMTESFVdhdHRlbnNjaGVpZCwgR2VybWFueTICR0I"
          }
        },
        "required": [
          "last_name"
        ],
        "example": {
          "customer_id": "674907513",
          "first_name": "James",
          "last_name": "Bond",
          "ivms101": "CjwKEQoPCgRCb25kEgVKYW1lcxgCKiMKCjE5MjAtMTEtMTESFVdhdHRlbnNjaGVpZCwgR2VybWFueTICR0I"
        }
      },
      "AccountSummary": {
        "title": "AccountSummary",
        "type": "object",
        "description": "A summary of customer account details that is used in account lists to minimize data transfer.",
        "properties": {
          "id": {
            "type": "string",
            "format": "ULID",
            "description": "The unique identifier of the account on your Envoy node - used to construct the detail URL.",
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          },
          "customer_id": {
            "type": "string",
            "description": "An internal customer ID associated with the account to reference in your customer management system.",
            "example": "674907513"
          },
          "first_name": {
            "type": "string",
            "description": "The first or \"secondary\" name of the natural person associated with the customer account.",
            "example": "James"
          },
          "last_name": {
            "type": "string",
            "description": "The last or \"primary\" name of the natural person assoociated customer account. This name is used to sort accounts.",
            "example": "Bond"
          },
          "travel_address": {
            "type": "string",
            "format": "TravelAddress",
            "description": "A travel address that the customer can send to request payment using virtual assets.",
            "example": "taLg4sBFp3cWhB9wN7qqPwDzq32bWwhibhFvADbiYp5fMR7asAxbqNrPuUyT4VzZa98oPk6dHcdKhov9jiraNrcZ7yQdikXcwbv"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the account record was created in the database.",
            "example": "2024-08-28T10:14:43-05:00"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the account record was last modified in the database.",
            "example": "2024-08-28T12:23:24-05:00"
          }
        },
        "example": {
          "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
          "customer_id": "674907513",
          "first_name": "James",
          "last_name": "Bond",
          "travel_address": "taLg4sBFp3cWhB9wN7qqPwDzq32bWwhibhFvADbiYp5fMR7asAxbqNrPuUyT4VzZa98oPk6dHcdKhov9jiraNrcZ7yQdikXcwbv",
          "created": "2024-08-28T10:14:43-05:00",
          "modified": "2024-08-28T12:23:24-05:00"
        }
      },
      "AccountList": {
        "title": "AccountList",
        "type": "object",
        "description": "A list of Account objects, returned in a paginated fashion.",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageInfo"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountSummary"
            },
            "example": [
              {
                "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                "customer_id": "674907513",
                "first_name": "James",
                "last_name": "Bond",
                "travel_address": "taLg4sBFp3cWhB9wN7qqPwDzq32bWwhibhFvADbiYp5fMR7asAxbqNrPuUyT4VzZa98oPk6dHcdKhov9jiraNrcZ7yQdikXcwbv",
                "created": "2024-08-28T10:14:43-05:00",
                "modified": "2024-08-28T12:23:24-05:00"
              },
              {
                "id": "01J6FRR2NSTQ0TC7DDMAR91MG7",
                "customer_id": "39910432",
                "first_name": "Twilda",
                "last_name": "Swansong",
                "travel_address": "taLg4sBFp3cWhB9wN7qsiUF8pxo7JXtVShYkv5ix1wG2kX5y4pRiJ3TRHmeD8H67TLLm5wHyDktVw1onfDeQfESumf91mjRTMbi",
                "created": "2024-08-29T14:09:21-05:00",
                "modified": "2024-08-29T14:10:50-05:00"
              }
            ]
          }
        },
        "example": {
          "page": {
            "page_size": 50
          },
          "accounts": [
            {
              "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
              "customer_id": "674907513",
              "first_name": "James",
              "last_name": "Bond",
              "travel_address": "taLg4sBFp3cWhB9wN7qqPwDzq32bWwhibhFvADbiYp5fMR7asAxbqNrPuUyT4VzZa98oPk6dHcdKhov9jiraNrcZ7yQdikXcwbv",
              "created": "2024-08-28T10:14:43-05:00",
              "modified": "2024-08-28T12:23:24-05:00"
            },
            {
              "id": "01J6FRR2NSTQ0TC7DDMAR91MG7",
              "customer_id": "39910432",
              "first_name": "Twilda",
              "last_name": "Swansong",
              "travel_address": "taLg4sBFp3cWhB9wN7qsiUF8pxo7JXtVShYkv5ix1wG2kX5y4pRiJ3TRHmeD8H67TLLm5wHyDktVw1onfDeQfESumf91mjRTMbi",
              "created": "2024-08-29T14:09:21-05:00",
              "modified": "2024-08-29T14:10:50-05:00"
            }
          ]
        }
      },
      "CryptoAddress": {
        "title": "CryptoAddress",
        "type": "object",
        "description": "A record of a crypto wallet address and the blockchain network that wallet belongs to.",
        "properties": {
          "id": {
            "type": "string",
            "format": "ULID",
            "description": "The unique identifier of the crypto address on your Envoy node.",
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          },
          "crypto_address": {
            "type": "string",
            "description": "The crypto or wallet address for the blockchain network.",
            "example": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i"
          },
          "network": {
            "type": "string",
            "description": "The network the crypto wallet address belongs to in SLIP-0044 three-character encoding.",
            "example": "BTC"
          },
          "asset_type": {
            "type": "string",
            "description": "If the network supports multiple asset types, the description of the asset type managed by the wallet.",
            "example": "BCH"
          },
          "tag": {
            "type": "string",
            "description": "The memo or destination tag associated with the crypto wallet address if required by the network.",
            "example": "dt=1234567890"
          },
          "travel_address": {
            "type": "string",
            "format": "TravelAddress",
            "description": "The wallet specific travel address that allows counterparties to send travel rule inquiries associated with the wallet.",
            "example": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5WTaDe5fEN9vFTCtNxb2bv1HegpR8RcuV4EAhxtvKt8wfx4SnH414o6eWU"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the crypto address record was created.",
            "example": "2024-08-28T10:14:43-05:00"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the crypto address record was last modified.",
            "example": "2024-08-28T12:23:24-05:00"
          }
        },
        "example": {
          "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
          "crypto_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
          "network": "BTC",
          "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5WTaDe5fEN9vFTCtNxb2bv1HegpR8RcuV4EAhxtvKt8wfx4SnH414o6eWU",
          "created": "2024-08-28T10:14:43-05:00",
          "modified": "2024-08-28T12:23:24-05:00"
        }
      },
      "CryptoAddressList": {
        "title": "CryptoAddressList",
        "type": "object",
        "description": "A list of CryptoAddress objects, returned in a paginated fashion.",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageInfo"
          },
          "crypto_addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CryptoAddress"
            },
            "example": [
              {
                "id": "01J6FRB1EGJCEZXRMQGW1FM0BR",
                "crypto_address": "0x9268102451DE47C536C3AD92203D4E9692941E06",
                "network": "ETH",
                "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5XP69YEctxHMPwa7YTEU3QjKcC2RY9Jqjd4VsCsj396YMZvVCfFaYjDR7P",
                "created": "2024-08-29T14:05:31-05:00",
                "modified": "2024-08-30T18:39:02-05:00"
              },
              {
                "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                "crypto_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                "network": "BTC",
                "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5WTaDe5fEN9vFTCtNxb2bv1HegpR8RcuV4EAhxtvKt8wfx4SnH414o6eWU",
                "created": "2024-08-28T10:14:43-05:00",
                "modified": "2024-08-28T12:23:24-05:00"
              }
            ]
          }
        },
        "example": {
          "page": {
            "page_size": 50
          },
          "crypto_addresses": [
            {
              "id": "01J6FRB1EGJCEZXRMQGW1FM0BR",
              "crypto_address": "0x9268102451DE47C536C3AD92203D4E9692941E06",
              "network": "ETH",
              "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5XP69YEctxHMPwa7YTEU3QjKcC2RY9Jqjd4VsCsj396YMZvVCfFaYjDR7P",
              "created": "2024-08-29T14:05:31-05:00",
              "modified": "2024-08-30T18:39:02-05:00"
            },
            {
              "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
              "crypto_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
              "network": "BTC",
              "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5WTaDe5fEN9vFTCtNxb2bv1HegpR8RcuV4EAhxtvKt8wfx4SnH414o6eWU",
              "created": "2024-08-28T10:14:43-05:00",
              "modified": "2024-08-28T12:23:24-05:00"
            }
          ]
        }
      },
      "CryptoAddressForm": {
        "title": "CryptoAddressForm",
        "type": "object",
        "description": "The editable fields of a crypto wallet address for create and update.",
        "properties": {
          "crypto_address": {
            "type": "string",
            "description": "The crypto or wallet address for the blockchain network (required).",
            "example": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i"
          },
          "network": {
            "type": "string",
            "description": "The network the crypto wallet address belongs to in SLIP-0044 three-character encoding (required).",
            "example": "BTC"
          },
          "asset_type": {
            "type": "string",
            "description": "If the network supports multiple asset types, the description of the asset type managed by the wallet. This field is not validated.",
            "example": "BCH"
          },
          "tag": {
            "type": "string",
            "description": "The memo or destination tag associated with the crypto wallet address if required by the network. This field is not validated.",
            "example": "dt=1234567890"
          }
        },
        "required": [
          "crypto_address",
          "network"
        ],
        "example": {
          "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
          "crypto_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
          "network": "BTC"
        }
      },
      "Counterparty": {
        "title": "Counterparty",
        "type": "object",
        "description": "Defines remote VASPs with whom you can exchange Travel Rule information and how to connect to them using a peer-to-peer network.",
        "properties": {
          "id": {
            "type": "string",
            "format": "ULID",
            "description": "The unique identifier of the counterparty on your Envoy node.",
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          },
          "source": {
            "type": "string",
            "enum": [
              "gds",
              "user",
              "peer"
            ],
            "description": "the source of the counterparty, e.g. gds means the record was created from the TRISA global directory service.",
            "example": "gds"
          },
          "directory_id": {
            "type": "string",
            "format": "uuid",
            "description": "the unique identifier of the counterparty on the registered directory service.",
            "example": "5154a0aa-502c-4179-a6f2-8b143d59edce"
          },
          "registered_directory": {
            "type": "string",
            "description": "the name of the directory service the counterparty is registered with if the source is gds.",
            "example": "trisatest.net"
          },
          "protocol": {
            "type": "string",
            "enum": [
              "trisa",
              "trp",
              "email"
            ],
            "description": "the travel rule protocol used to connect to the counterparty with.",
            "example": "trisa"
          },
          "common_name": {
            "type": "string",
            "format": "domain",
            "description": "the common name of the travel rule domain of the counterparty; used for uniquely identifying the counterparty.",
            "example": "api.alice.vaspbot.net"
          },
          "endpoint": {
            "type": "string",
            "format": "url",
            "description": "the URL endpoint to connect to using the travel rule protocol. For TRISA this will be host:port and for TRP will be a URL.",
            "example": "api.alice.vaspbot.net:443"
          },
          "travel_address": {
            "type": "string",
            "format": "TravelAddress",
            "description": "The counterparty travel address that allows the user to identify which counterparty to use in a transfer.",
            "example": "taYgWCfsnPN8hsqUAZWm4TW7WrHU5qZT3GiBPpfSApGSqoPMH1D6kiNRzST5Gz"
          },
          "name": {
            "type": "string",
            "description": "The name of the counterparty, usually the counterparty's legal or trading name.",
            "example": "AliceCoin"
          },
          "website": {
            "type": "string",
            "format": "url",
            "description": "The website of the counterparty, used to lookup the counterparty's online information.",
            "example": "https://example.com"
          },
          "country": {
            "type": "string",
            "format": "ISO 3166-1 alpha-2",
            "description": "The 2 character country code of the country that the counterparty is registered in or primarily operates in.",
            "example": "JP"
          },
          "business_category": {
            "type": "string",
            "enum": [
              "UNKNOWN_ENTITY",
              "PRIVATE_ORGANIZATION",
              "GOVERNMENT_ENTITY",
              "BUSINESS_ENTITY",
              "NON_COMMERCIAL_ENTITY",
              "NON_VASP_ENTITY"
            ],
            "description": "The business category defined by the VASP in their TRIXO form for TRISA registration.",
            "example": "PRIVATE_ORGANIZATION"
          },
          "vasp_categories": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Exchange",
                "DEX",
                "P2P",
                "Kiosk",
                "Custodian",
                "OTC",
                "Fund",
                "Project",
                "Gambling",
                "Miner",
                "Mixer",
                "Individual",
                "Other",
                "Unknown"
              ],
              "description": "Self reported virtual asset services provided by the counterparty.",
              "example": "Kiosk"
            },
            "example": [
              "Exchange",
              "Custodian",
              "Miner"
            ]
          },
          "verified_on": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the counterparty record was verified as being a TRISA member on the network your node is connected to.",
            "example": "2024-08-28T10:14:43-05:00"
          },
          "ivms101": {
            "type": "string",
            "format": "base64",
            "description": "The base64 encoded representation of a JSON or protocol buffer IVMS101 record for the legal person of the counterparty.",
            "example": "EmcKLwoeChpBbGljZSBUcmFkaW5nIENvbXBhbnksIExURBABCg0KCUFsaWNlQ29pbhADEjAIAiILTWFpbiBTdHJlZXQqAzEyM1IFNTU4ODBaClNtYWxsdmlsbGVqAktZggECVVMqAkRF"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the counterparty record was created.",
            "example": "2024-08-28T10:14:43-05:00"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the counterparty record was last modified.",
            "example": "2024-08-28T12:23:24-05:00"
          }
        },
        "example": {
          "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
          "source": "gds",
          "directory_id": "5154a0aa-502c-4179-a6f2-8b143d59edce",
          "registered_directory": "trisatest.net",
          "protocol": "trisa",
          "common_name": "api.alice.vaspbot.net",
          "endpoint": "api.alice.vaspbot.net:443",
          "travel_address": "taYgWCfsnPN8hsqUAZWm4TW7WrHU5qZT3GiBPpfSApGSqoPMH1D6kiNRzST5Gz",
          "name": "AliceCoin",
          "website": "https://alice.vaspbot.net",
          "country": "GB",
          "business_category": "NON_VASP_ENTITY",
          "vasp_categories": [
            "Other"
          ],
          "ivms101": "EmcKLwoeChpBbGljZSBUcmFkaW5nIENvbXBhbnksIExURBABCg0KCUFsaWNlQ29pbhADEjAIAiILTWFpbiBTdHJlZXQqAzEyM1IFNTU4ODBaClNtYWxsdmlsbGVqAktZggECVVMqAkRF",
          "verified_on": "2024-08-28T10:14:43-05:00",
          "created": "2024-08-28T10:14:43-05:00",
          "modified": "2024-08-28T12:23:24-05:00"
        }
      },
      "CounterpartyForm": {
        "title": "CounterpartyForm",
        "type": "object",
        "description": "Defines the editable fields to create or update counterparty record. Note that only counterparties created with the user or peer source may be edited.",
        "properties": {
          "protocol": {
            "type": "string",
            "enum": [
              "trisa",
              "trp",
              "email"
            ],
            "description": "Specify the travel rule protocol used to connect to the counterparty with; this will likely be TRP or email since TRISA counterparties are fetched from the GDS.",
            "example": "trp"
          },
          "common_name": {
            "type": "string",
            "format": "domain",
            "description": "Specify the common name of the travel rule domain of the counterparty; used for uniquely identifying the counterparty.",
            "example": "api.alice.vaspbot.net"
          },
          "endpoint": {
            "type": "string",
            "format": "url",
            "description": "Specify the URL endpoint to connect to using the travel rule protocol.",
            "example": "api.alice.vaspbot.net:443"
          },
          "name": {
            "type": "string",
            "description": "The name of the counterparty, usually the counterparty's legal or trading name -- for identying counterparty VASPs with search.",
            "example": "AliceCoin"
          },
          "website": {
            "type": "string",
            "format": "url",
            "description": "The website of the counterparty, used to lookup the counterparty's online information or reference their online presence.",
            "example": "https://example.com"
          },
          "country": {
            "type": "string",
            "format": "ISO 3166-1 alpha-2",
            "description": "Specify the 2 character country code of the country that the counterparty is registered in or primarily operates in.",
            "example": "JP"
          },
          "business_category": {
            "type": "string",
            "enum": [
              "UNKNOWN_ENTITY",
              "PRIVATE_ORGANIZATION",
              "GOVERNMENT_ENTITY",
              "BUSINESS_ENTITY",
              "NON_COMMERCIAL_ENTITY",
              "NON_VASP_ENTITY"
            ],
            "description": "Specify a business category for the VASP for local compliance reference.",
            "example": "PRIVATE_ORGANIZATION"
          },
          "vasp_categories": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Exchange",
                "DEX",
                "P2P",
                "Kiosk",
                "Custodian",
                "OTC",
                "Fund",
                "Project",
                "Gambling",
                "Miner",
                "Mixer",
                "Individual",
                "Other",
                "Unknown"
              ],
              "description": "Specify the known virtual asset services provided by the counterparty for compliance purposes.",
              "example": "Kiosk"
            },
            "example": [
              "Exchange",
              "Custodian",
              "Miner"
            ]
          },
          "ivms101": {
            "type": "string",
            "format": "base64",
            "description": "The base64 encoded representation of a JSON or protocol buffer IVMS101 record for the legal person of the counterparty can be modified but must be parseable.",
            "example": "EmcKLwoeChpBbGljZSBUcmFkaW5nIENvbXBhbnksIExURBABCg0KCUFsaWNlQ29pbhADEjAIAiILTWFpbiBTdHJlZXQqAzEyM1IFNTU4ODBaClNtYWxsdmlsbGVqAktZggECVVMqAkRF"
          }
        },
        "required": [
          "protocol",
          "common_name",
          "endpoint",
          "name",
          "country"
        ],
        "example": {
          "protocol": "trp",
          "common_name": "trp.alice.vaspbot.net",
          "endpoint": "https://trp.alice.vaspbot.net",
          "name": "AliceCoin",
          "website": "https://alice.vaspbot.net",
          "country": "GB",
          "business_category": "NON_VASP_ENTITY",
          "vasp_categories": [
            "Other"
          ],
          "ivms101": "EmcKLwoeChpBbGljZSBUcmFkaW5nIENvbXBhbnksIExURBABCg0KCUFsaWNlQ29pbhADEjAIAiILTWFpbiBTdHJlZXQqAzEyM1IFNTU4ODBaClNtYWxsdmlsbGVqAktZggECVVMqAkRF"
        }
      },
      "CounterpartySummary": {
        "title": "CounterpartySummary",
        "type": "object",
        "description": "A summary of counterparty fields to return in counterparty lists to conserve memory.",
        "properties": {
          "id": {
            "type": "string",
            "format": "ULID",
            "description": "The unique identifier of the counterparty on your Envoy node - used to construct the detail url.",
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          },
          "source": {
            "type": "string",
            "enum": [
              "gds",
              "user",
              "peer"
            ],
            "description": "The source of the counterparty, used to filter the returned list.",
            "example": "gds"
          },
          "protocol": {
            "type": "string",
            "enum": [
              "trisa",
              "trp",
              "email"
            ],
            "description": "the travel rule protocol used to connect to the counterparty with, used to filter the returned list.",
            "example": "trisa"
          },
          "endpoint": {
            "type": "string",
            "format": "url",
            "description": "the URL endpoint to connect to using the travel rule protocol.",
            "example": "api.alice.vaspbot.net:443"
          },
          "name": {
            "type": "string",
            "description": "The name of the counterparty, usually the counterparty's legal or trading name, for quick identification of a counterparty.",
            "example": "AliceCoin"
          },
          "website": {
            "type": "string",
            "format": "url",
            "description": "The website of the counterparty, used to identify the counterparty based on domain records.",
            "example": "https://example.com"
          },
          "country": {
            "type": "string",
            "format": "ISO 3166-1 alpha-2",
            "description": "The 2 character country code of the country that the counterparty is registered in or primarily operates in to assist in counterparty identification.",
            "example": "JP"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the counterparty record was created for ordering purposes.",
            "example": "2024-08-28T10:14:43-05:00"
          }
        },
        "example": {
          "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
          "source": "gds",
          "protocol": "trisa",
          "endpoint": "api.alice.vaspbot.net:443",
          "name": "AliceCoin",
          "website": "https://alice.vaspbot.net",
          "country": "GB",
          "created": "2024-08-28T10:14:43-05:00"
        }
      },
      "CounterpartyList": {
        "title": "CounterpartyList",
        "type": "object",
        "description": "A list of Counterparty objects, returned in a paginated fashion.",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageInfo"
          },
          "counterparties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CounterpartySummary"
            },
            "example": [
              {
                "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                "source": "gds",
                "protocol": "trisa",
                "endpoint": "api.alice.vaspbot.net:443",
                "name": "AliceCoin",
                "website": "https://alice.vaspbot.net",
                "country": "GB",
                "created": "2024-08-28T10:14:43-05:00"
              },
              {
                "id": "01J6G3BE4QRY6355ZJ998SATXA",
                "source": "gds",
                "protocol": "trisa",
                "endpoint": "api.bob.vaspbot.net:443",
                "name": "BobVASP",
                "website": "https://bob.vaspbot.net",
                "country": "US",
                "created": "2024-08-29T17:15:54-05:00"
              }
            ]
          }
        },
        "example": {
          "page": {
            "page_size": 50
          },
          "counterparties": [
            {
              "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
              "source": "gds",
              "protocol": "trisa",
              "endpoint": "api.alice.vaspbot.net:443",
              "name": "AliceCoin",
              "website": "https://alice.vaspbot.net",
              "country": "GB",
              "created": "2024-08-28T10:14:43-05:00"
            },
            {
              "id": "01J6G3BE4QRY6355ZJ998SATXA",
              "source": "gds",
              "protocol": "trisa",
              "endpoint": "api.bob.vaspbot.net:443",
              "name": "BobVASP",
              "website": "https://bob.vaspbot.net",
              "country": "US",
              "created": "2024-08-29T17:15:54-05:00"
            }
          ]
        }
      },
      "Transaction": {
        "title": "Transaction",
        "type": "object",
        "description": "A transaction is a travel rule information exchange related to an on-chain transfer of virtual assets for compliance purposes. The Envoy node stores the transaction information in a decrypted form for indexing and search, but the PII of a transaction is stored in secure envelopes, which are encrypted and exchanged with the counterparty.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The transaction ID, also the TRISA envelope ID (must be a UUID).",
            "example": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5"
          },
          "source": {
            "type": "string",
            "enum": [
              "unknown",
              "local",
              "remote"
            ],
            "description": "The originating source of the transaction; \"local\" if this was an outgoing transaction from this Envoy node, \"remote\" if this is an incoming transaction from a counterparty.",
            "example": "remote"
          },
          "status": {
            "type": "string",
            "enum": [
              "unspecified",
              "draft",
              "pending",
              "review",
              "repair",
              "accepted",
              "completed",
              "rejected"
            ],
            "description": "The current status of the travel rule transaction, which defines the actions the compliance officer should take.",
            "example": "accepted",
            "externalDocs": [
              "https://trisa.dev/envoy/workflows/index.html#transaction-states-and-actions"
            ]
          },
          "counterparty": {
            "type": "string",
            "description": "The name or common name of the counterparty as determined by the Envoy node.",
            "example": "AliceCoin"
          },
          "counterparty_id": {
            "type": "string",
            "format": "ulid",
            "description": "The ID of the counterparty in the counterparties table of the Envoy node.",
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          },
          "originator": {
            "type": "string",
            "description": "The name of the originator as determined by the Envoy node.",
            "example": "James Bond"
          },
          "originator_address": {
            "type": "string",
            "description": "The crypto wallet address of the originator as determined by the Envoy node.",
            "example": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i"
          },
          "beneficiary": {
            "type": "string",
            "description": "The name of the beneficiary as determined by the Envoy node.",
            "example": "Twilda Swansong"
          },
          "beneficiary_address": {
            "type": "string",
            "description": "The crypto wallet address of the beneficiary as determined by the Envoy node.",
            "example": "mtWVpHEcFcCGG9cuj1rUxhTGQZ1gEazxs6"
          },
          "virtual_asset": {
            "type": "string",
            "description": "A representation of the network and virtual asset that defines the on-chain transaction.",
            "example": "BTC"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the on-chain transaction as defined by the smallest unit of that virtual asset.",
            "example": 1.23e-6
          },
          "last_update": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp of the last activity on the transaction; usually a secure envelope sent or received.",
            "example": "2024-08-30T12:41:14-05:00"
          },
          "envelope_count": {
            "type": "integer",
            "description": "The number of envelopes sent back and forth between your node and the counterparty.",
            "example": 8
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp that the transaction record was created.",
            "example": "2024-08-30T11:14:55-05:00"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp that the transaction record was last modified.",
            "example": "2024-08-30T12:41:14-05:00"
          }
        },
        "example": {
          "id": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5",
          "source": "remote",
          "status": "accepted",
          "counterparty": "AliceCoin",
          "counterparty_id": "01J6DJ9F691CF8E9H0V3ET0M0E",
          "originator": "James Bond",
          "originator_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
          "beneficiary": "Twilda Swansong",
          "beneficiary_address": "mtWVpHEcFcCGG9cuj1rUxhTGQZ1gEazxs6",
          "virtual_asset": "BTC",
          "amount": 1.23e-6,
          "last_update": "2024-08-30T12:41:14-05:00",
          "envelope_count": 8,
          "created": "2024-08-30T11:14:55-05:00",
          "modified": "2024-08-30T12:41:14-05:00"
        }
      },
      "TransactionForm": {
        "title": "TransactionForm",
        "type": "object",
        "description": "The editable fields that can be used to create or modify a transaction record.",
        "properties": {
          "source": {
            "type": "string",
            "enum": [
              "unknown",
              "local",
              "remote"
            ],
            "description": "The originating source of the transaction; generally if using the create method, you should specify \"local\".",
            "example": "remote"
          },
          "status": {
            "type": "string",
            "enum": [
              "unspecified",
              "draft",
              "pending",
              "review",
              "repair",
              "accepted",
              "completed",
              "rejected"
            ],
            "description": "The current status of the travel rule transaction, which should be set based on actions taken by compliance officers or the remote counterparty.",
            "example": "accepted",
            "externalDocs": [
              "https://trisa.dev/envoy/workflows/index.html#transaction-states-and-actions"
            ]
          },
          "counterparty": {
            "type": "string",
            "description": "The name or common name of the counterparty for filtering and searching.",
            "example": "AliceCoin"
          },
          "counterparty_id": {
            "type": "string",
            "format": "ulid",
            "description": "The ID of the counterparty for better counterparty lookup.",
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          },
          "originator": {
            "type": "string",
            "description": "The name of the originator of the transaction.",
            "example": "James Bond"
          },
          "originator_address": {
            "type": "string",
            "description": "The crypto wallet address of the originator of the transaction.",
            "example": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i"
          },
          "beneficiary": {
            "type": "string",
            "description": "The name of the beneficiary the transfer is going to.",
            "example": "Twilda Swansong"
          },
          "beneficiary_address": {
            "type": "string",
            "description": "The crypto wallet address of the beneficiary the transfer is going to.",
            "example": "mtWVpHEcFcCGG9cuj1rUxhTGQZ1gEazxs6"
          },
          "virtual_asset": {
            "type": "string",
            "description": "The network and virtual asset of the on-chain transaction.",
            "example": "BTC"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the the smallest unit of the virtual asset for the blockchain.",
            "example": 1.23e-6
          }
        },
        "required": [
          "source",
          "status",
          "counterparty",
          "virtual_asset",
          "amount"
        ],
        "example": {
          "source": "remote",
          "status": "accepted",
          "counterparty": "AliceCoin",
          "counterparty_id": "01J6DJ9F691CF8E9H0V3ET0M0E",
          "originator": "James Bond",
          "originator_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
          "beneficiary": "Twilda Swansong",
          "beneficiary_address": "mtWVpHEcFcCGG9cuj1rUxhTGQZ1gEazxs6",
          "virtual_asset": "BTC",
          "amount": 1.23e-6
        }
      },
      "TransactionList": {
        "title": "TransactionList",
        "type": "object",
        "description": "A list of transaction objects, returned in a paginated fashion.",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageInfo"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "example": [
              {
                "id": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5",
                "source": "remote",
                "status": "accepted",
                "counterparty": "AliceCoin",
                "counterparty_id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                "originator": "James Bond",
                "originator_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                "beneficiary": "Twilda Swansong",
                "beneficiary_address": "mtWVpHEcFcCGG9cuj1rUxhTGQZ1gEazxs6",
                "virtual_asset": "BTC",
                "amount": 1.23e-6,
                "last_update": "2024-08-30T12:41:14-05:00",
                "envelope_count": 8,
                "created": "2024-08-30T11:14:55-05:00",
                "modified": "2024-08-30T12:41:14-05:00"
              },
              {
                "id": "a1edfdf3-a0b2-423a-b293-dd597a3664c0",
                "source": "local",
                "status": "pending",
                "counterparty": "BobVASP",
                "counterparty_id": "01J6JC3YZ207WZ9Y9RJQAWB9E6",
                "originator": "Marcell Aven",
                "originator_address": "0x435A6EA4EAFF2ACC2717F51AF55D7EC1528CA5C0",
                "beneficiary": "Francine Le'vint",
                "beneficiary_address": "0x79099D52D6FC37F1BEE10BA20EE5F8D86FFAB95D",
                "virtual_asset": "ETH",
                "amount": 628,
                "last_update": "2024-08-30T14:28:46-05:00",
                "envelope_count": 2,
                "created": "2024-08-30T14:28:38-05:00",
                "modified": "2024-08-30T14:28:46-05:00"
              }
            ]
          }
        },
        "example": {
          "page": {
            "page_size": 50
          },
          "transactions": [
            {
              "id": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5",
              "source": "remote",
              "status": "accepted",
              "counterparty": "AliceCoin",
              "counterparty_id": "01J6DJ9F691CF8E9H0V3ET0M0E",
              "originator": "James Bond",
              "originator_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
              "beneficiary": "Twilda Swansong",
              "beneficiary_address": "mtWVpHEcFcCGG9cuj1rUxhTGQZ1gEazxs6",
              "virtual_asset": "BTC",
              "amount": 1.23e-6,
              "last_update": "2024-08-30T12:41:14-05:00",
              "envelope_count": 8,
              "created": "2024-08-30T11:14:55-05:00",
              "modified": "2024-08-30T12:41:14-05:00"
            },
            {
              "id": "a1edfdf3-a0b2-423a-b293-dd597a3664c0",
              "source": "local",
              "status": "pending",
              "counterparty": "BobVASP",
              "counterparty_id": "01J6JC3YZ207WZ9Y9RJQAWB9E6",
              "originator": "Marcell Aven",
              "originator_address": "0x435A6EA4EAFF2ACC2717F51AF55D7EC1528CA5C0",
              "beneficiary": "Francine Le'vint",
              "beneficiary_address": "0x79099D52D6FC37F1BEE10BA20EE5F8D86FFAB95D",
              "virtual_asset": "ETH",
              "amount": 628,
              "last_update": "2024-08-30T14:28:46-05:00",
              "envelope_count": 2,
              "created": "2024-08-30T14:28:38-05:00",
              "modified": "2024-08-30T14:28:46-05:00"
            }
          ]
        }
      },
      "SecureEnvelope": {
        "title": "SecureEnvelope",
        "type": "object",
        "description": "A secure envelope holds an encrypted payload that contains the PII compliance information related to a transaction. The goal of a TRISA transaction is for both counterparties to have identical secure envelope payloads, encrypted so that only each counterparty may view the payload. TRP messages are also stored in secure envelopes, though there is no guarantee of how the data is being stored on the counterparty.",
        "example": {}
      },
      "SecureEnvelopeSummary": {
        "title": "SecureEnvelopeSummary",
        "type": "object",
        "description": "The subset of secure envelope fields that are returned as a summary for lists of secure envelopes to minimize data transfer.",
        "example": {}
      },
      "Envelope": {
        "title": "Envelope",
        "type": "object",
        "description": "An envelope is a decrypted version of a secure envelope and is used either to allow the Envoy node to perform decryption on behalf of the API client or for the API client to send data to the Envoy node for conversion into a secure envelope.",
        "example": {}
      },
      "EnvelopeSummary": {
        "title": "EnvelopeSummary",
        "type": "object",
        "description": "The subset of envelope fields that provide a summary for envelope list requests to minimize data transfer.",
        "example": {}
      },
      "EnvelopeList": {
        "title": "EnvelopeList",
        "type": "object",
        "description": "A list of either secure envelopes or [decrypted] envelopes, returned in a paginated fashion.",
        "example": {}
      },
      "Rejection": {
        "title": "Rejection",
        "type": "object",
        "description": "A rejection is used to send a TRISA error back to the counterparty. There are two types of errors. A \"Rejection\" (reply=false) informs the counterparty that the on-chain transaction should not proceed because compliance requirements could not be met. A \"Repair\" (reply=true) informs the counterparty that there is some issue with the compliance information that needs to be fixed before the on-chain transaction can proceed.",
        "example": {}
      },
      "Repair": {
        "title": "Repair",
        "type": "object",
        "description": "A repair object sends the transaction data along with the repair message from the counterparty so that the API client can make fixes to appropriately conclude the travel rule transaction.",
        "example": {}
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Authentication with JWT bearer token obtained using an API key and the authenticate endpoint."
      }
    },
    "parameters": {
      "page_size": {
        "name": "page_size",
        "in": "query",
        "description": "Specify the page size for a paginated list request, e.g. the number of records to return in a single request.",
        "schema": {
          "type": "integer",
          "example": 50
        },
        "example": 50
      },
      "next_page_token": {
        "name": "next_page_token",
        "in": "query",
        "description": "Used to specify the next page in a series of paginated list requests. Page tokens expire, so make sure to use them in a sequence of requests to retrieve a large list.",
        "schema": {
          "type": "string",
          "format": "base64",
          "example": "eyJjIjogIjAxSjZESjlGNjkxQ0Y4RTlIMFYzRVQwTTBFIiwgInMiOiA1MCwgImUiOiAxNzI0ODgyOTU4fQ=="
        },
        "example": "eyJjIjogIjAxSjZESjlGNjkxQ0Y4RTlIMFYzRVQwTTBFIiwgInMiOiA1MCwgImUiOiAxNzI0ODgyOTU4fQ=="
      },
      "prev_page_token": {
        "name": "prev_page_token",
        "in": "query",
        "description": "Used to specify the previous page in a series of paginated list requests. Although reverse iteration is not necessarily supported, this token can allow refresh of a previous page fetched during paginated iteration.",
        "schema": {
          "type": "string",
          "format": "base64",
          "example": "eyJjIjogIjAxSjZESjlGNjkxQ0Y4RTlIMFYzRVQwTTBFIiwgInMiOiA1MCwgImUiOiAxNzI0ODgyOTU4fQ=="
        },
        "example": "eyJjIjogIjAxSjZESjlGNjkxQ0Y4RTlIMFYzRVQwTTBFIiwgInMiOiA1MCwgImUiOiAxNzI0ODgyOTU4fQ=="
      },
      "query": {
        "name": "query",
        "in": "query",
        "description": "The name of the vasp to search for. The best bet is to use the shortest search query possible to return the most results.",
        "schema": {
          "type": "string",
          "example": "Coin"
        },
        "example": "Coin"
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Limit the number of records to return in a single search query.",
        "schema": {
          "type": "integer",
          "example": 10,
          "default": 10
        },
        "example": 10
      }
    }
  },
  "paths": {
    "/v1/authenticate": {
      "post": {
        "summary": "Authenticate",
        "description": "Authenticate your client with your API Key and receive a JWT claims package that can be used as a Bearer token to authenticate future requests.",
        "operationId": "authenticate",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "description": "An API authentication JSON payload with the API key client id and secret.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/APIAuthentication"
              },
              "example": {
                "client_id": "kbxiRmtYvLbkYKrlefJoSP",
                "client_secret": "R4OTqjvlGj02x4PvoPe6bxTopFjQ15QrISG8X3HqD5isWIng"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginReply"
                },
                "example": {
                  "access_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjAxSFZINTBWWEs5MFJKWlI5WENNMENCRkJRIiwidHlwIjoiSldUIn0.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAiLCJzdWIiOiJrMDFKNVkyUjBZQUZFU0ZUVzYzU1JTNTg4WjIiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo4MDAwIl0sImV4cCI6MTcyNDg4NjU1OCwibmJmIjoxNzI0ODgyOTU4LCJpYXQiOjE3MjQ4ODI5NTgsImp0aSI6IjAxSjZER0pFMFExMEcwQzY1U1NEUlQ3VDY3IiwiY2xpZW50SUQiOiJrYnhpUm10WXZMYmtZS3JsZWZKb1NQIiwicGVybWlzc2lvbnMiOlsidXNlcnM6bWFuYWdlIiwidXNlcnM6dmlldyIsImFwaWtleXM6bWFuYWdlIiwiYXBpa2V5czp2aWV3IiwiYXBpa2V5czpyZXZva2UiLCJjb3VudGVycGFydGllczptYW5hZ2UiLCJjb3VudGVycGFydGllczp2aWV3IiwiYWNjb3VudHM6bWFuYWdlIiwiYWNjb3VudHM6dmlldyIsInRyYXZlbHJ1bGU6bWFuYWdlIiwidHJhdmVscnVsZTpkZWxldGUiLCJ0cmF2ZWxydWxlOnZpZXciLCJjb25maWc6bWFuYWdlIiwiY29uZmlnOnZpZXciLCJwa2k6bWFuYWdlIiwicGtpOmRlbGV0ZSIsInBraTp2aWV3Il19.vZeoZ6UR9e2qOU2Zd64nlnPne4Hbm3t8QtX_uM72pyf8BRIEehruioQCQ8RfqNJpSyacRCfhAKovTKChnWIPd8Xdkzcl9_bHnhYKlTzhdPYlD5K1uCNkNSJHZVwEJeG3aHB7xE-MVrvXivia3xHfth_ZSQab3jVuL6q_fjG4yPNpf3yjXbO3OPaGpavcElMf2r-DdIMIIewCmNktjrkFNtiNPmJU3MzLzwxLQPm2WUkcKZ27e7KD_LL2ZgluyVSM0BRehcdkPXmOXGF5KCTvHu7Xo5evUg6DvftEIz5IjCd-6s1YkZEJSQqBlfymhXXsmW1tlK4RYhay10Lg_k16HtO-kByLB2vtW6V1090XBK6tvjAJNjSGrD2tTFWbRlEe2YdYQ3pQilnSeJW1hBSpSYb_Ty94FwcsMrq_NiULYmxh6dOYtzrANou0EKd0HoYjw4d0dQOlCqSBfFclOoMmftjms5QG6E93s_Bjp2nhpKs6fr7TQhwmVChiVWBV2eq5s1mTLngNQhgLdNddcDJ_DJiisSv_V3nD-2uLcQaq9ZQ60oW1jQzUoTaJY9uw3SEToUa7bGRNKmHnUYYxRxqyVVYceaOlklPqfyT58zEBKqblhZfAE39rtyVZKOCc3x_d9yyQ9YaV6ijpaxC0PKTW0tSEWzNesNv4wayH-pNaSJM",
                  "refresh_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjAxSFZINTBWWEs5MFJKWlI5WENNMENCRkJRIiwidHlwIjoiSldUIn0.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAiLCJzdWIiOiJrMDFKNVkyUjBZQUZFU0ZUVzYzU1JTNTg4WjIiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo4MDAwIiwiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3YxL3JlYXV0aGVudGljYXRlIl0sImV4cCI6MTcyNDg5MDE1OCwibmJmIjoxNzI0ODg1NjU4LCJpYXQiOjE3MjQ4ODI5NTgsImp0aSI6IjAxSjZER0pFMFExMEcwQzY1U1NEUlQ3VDY3In0.Mzey5MWS-GRVhVAfISXH6keebNpoQTYWUVDhOnD-mENfWNurtkBpWMgV_FivpAHyXlH72Mv-cC0oaaUMYNMVRg5yCN6XQyYdUqcZsynULLkUUPcD7PGJLDIMe8CngAHITDmDRzdZaUpbWB4F-Ad_qEqzGhz3-PRAQxM7-Gt3IFNFVfWHJXTZzAiKHP_xtE4rnVczUx2sMXKPQHhxDVTiahMSAGiMVUWvnfKzwtv36U69cmfOw3UbG2IVZ6-2zm8ICSNesUqtwpjn1c5B_pYoqJNJYbp8jCzjRS2xT4xT7eDmMAjeFIiJEe6wuTvzU3ZwwqsXhLPtj27VNwHNHHL2qqnn0wTLx30amHkrBoEU44Rbf9Lxof6y_WDhZJIt7SeG1bDZ378falQd0v5yTColbaTk20jlADsoSdm8IgYoH91k1_-bzfHQkRTNUQI7YxCQWeP9zj-QzKdA7c86gyvYuPbsk29St0tGvQdS-aWa5ZLpDL3R5OLzO9zhqgNeGQVomF5YJaFAaBe4Y_6dyvNmHJB9cdfgEgj6B9cTzKdZWfn-r48E3xt0n41FdvYKgyDjR1gRBe7T-f55GbH5N0fR2Twdclc4DqD5c2gp5U0BTK-Uc2OBdT710Ws6mqdVljKoaG6VZjI-eA17pv7Khzdr8NWpmSUMYUGbAKtHFA7atsc"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldErrors"
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "field": "client_id",
                      "error": "missing client_id: this field is required"
                    },
                    {
                      "field": "client_secret",
                      "error": "missing client_secret: this field is required"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Invalid API Credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "invalid api credentials"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reauthenticate": {
      "post": {
        "summary": "Reauthenticate",
        "description": "The JWT `access_token` will eventually expire and can no longer be used to authenticate requests. The `refresh_token` can be used to reauthenticate your client without having to post the client ID and secret again. Note that reauthenticate will only work after the refresh token's `nbf` (not before) claim and before the tokens' `exp` (expires) claim.",
        "operationId": "reauthenticate",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "description": "A JSON payload with the refresh token as the primary element.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReauthenticateRequest"
              },
              "example": {
                "refresh_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjAxSFZINTBWWEs5MFJKWlI5WENNMENCRkJRIiwidHlwIjoiSldUIn0.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAiLCJzdWIiOiJrMDFKNVkyUjBZQUZFU0ZUVzYzU1JTNTg4WjIiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo4MDAwIiwiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3YxL3JlYXV0aGVudGljYXRlIl0sImV4cCI6MTcyNDg5MDE1OCwibmJmIjoxNzI0ODg1NjU4LCJpYXQiOjE3MjQ4ODI5NTgsImp0aSI6IjAxSjZER0pFMFExMEcwQzY1U1NEUlQ3VDY3In0.Mzey5MWS-GRVhVAfISXH6keebNpoQTYWUVDhOnD-mENfWNurtkBpWMgV_FivpAHyXlH72Mv-cC0oaaUMYNMVRg5yCN6XQyYdUqcZsynULLkUUPcD7PGJLDIMe8CngAHITDmDRzdZaUpbWB4F-Ad_qEqzGhz3-PRAQxM7-Gt3IFNFVfWHJXTZzAiKHP_xtE4rnVczUx2sMXKPQHhxDVTiahMSAGiMVUWvnfKzwtv36U69cmfOw3UbG2IVZ6-2zm8ICSNesUqtwpjn1c5B_pYoqJNJYbp8jCzjRS2xT4xT7eDmMAjeFIiJEe6wuTvzU3ZwwqsXhLPtj27VNwHNHHL2qqnn0wTLx30amHkrBoEU44Rbf9Lxof6y_WDhZJIt7SeG1bDZ378falQd0v5yTColbaTk20jlADsoSdm8IgYoH91k1_-bzfHQkRTNUQI7YxCQWeP9zj-QzKdA7c86gyvYuPbsk29St0tGvQdS-aWa5ZLpDL3R5OLzO9zhqgNeGQVomF5YJaFAaBe4Y_6dyvNmHJB9cdfgEgj6B9cTzKdZWfn-r48E3xt0n41FdvYKgyDjR1gRBe7T-f55GbH5N0fR2Twdclc4DqD5c2gp5U0BTK-Uc2OBdT710Ws6mqdVljKoaG6VZjI-eA17pv7Khzdr8NWpmSUMYUGbAKtHFA7atsc"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reauthentication Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginReply"
                },
                "example": {
                  "access_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjAxSFZINTBWWEs5MFJKWlI5WENNMENCRkJRIiwidHlwIjoiSldUIn0.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAiLCJzdWIiOiJrMDFKNVkyUjBZQUZFU0ZUVzYzU1JTNTg4WjIiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo4MDAwIl0sImV4cCI6MTcyNDg4NjU1OCwibmJmIjoxNzI0ODgyOTU4LCJpYXQiOjE3MjQ4ODI5NTgsImp0aSI6IjAxSjZER0pFMFExMEcwQzY1U1NEUlQ3VDY3IiwiY2xpZW50SUQiOiJrYnhpUm10WXZMYmtZS3JsZWZKb1NQIiwicGVybWlzc2lvbnMiOlsidXNlcnM6bWFuYWdlIiwidXNlcnM6dmlldyIsImFwaWtleXM6bWFuYWdlIiwiYXBpa2V5czp2aWV3IiwiYXBpa2V5czpyZXZva2UiLCJjb3VudGVycGFydGllczptYW5hZ2UiLCJjb3VudGVycGFydGllczp2aWV3IiwiYWNjb3VudHM6bWFuYWdlIiwiYWNjb3VudHM6dmlldyIsInRyYXZlbHJ1bGU6bWFuYWdlIiwidHJhdmVscnVsZTpkZWxldGUiLCJ0cmF2ZWxydWxlOnZpZXciLCJjb25maWc6bWFuYWdlIiwiY29uZmlnOnZpZXciLCJwa2k6bWFuYWdlIiwicGtpOmRlbGV0ZSIsInBraTp2aWV3Il19.vZeoZ6UR9e2qOU2Zd64nlnPne4Hbm3t8QtX_uM72pyf8BRIEehruioQCQ8RfqNJpSyacRCfhAKovTKChnWIPd8Xdkzcl9_bHnhYKlTzhdPYlD5K1uCNkNSJHZVwEJeG3aHB7xE-MVrvXivia3xHfth_ZSQab3jVuL6q_fjG4yPNpf3yjXbO3OPaGpavcElMf2r-DdIMIIewCmNktjrkFNtiNPmJU3MzLzwxLQPm2WUkcKZ27e7KD_LL2ZgluyVSM0BRehcdkPXmOXGF5KCTvHu7Xo5evUg6DvftEIz5IjCd-6s1YkZEJSQqBlfymhXXsmW1tlK4RYhay10Lg_k16HtO-kByLB2vtW6V1090XBK6tvjAJNjSGrD2tTFWbRlEe2YdYQ3pQilnSeJW1hBSpSYb_Ty94FwcsMrq_NiULYmxh6dOYtzrANou0EKd0HoYjw4d0dQOlCqSBfFclOoMmftjms5QG6E93s_Bjp2nhpKs6fr7TQhwmVChiVWBV2eq5s1mTLngNQhgLdNddcDJ_DJiisSv_V3nD-2uLcQaq9ZQ60oW1jQzUoTaJY9uw3SEToUa7bGRNKmHnUYYxRxqyVVYceaOlklPqfyT58zEBKqblhZfAE39rtyVZKOCc3x_d9yyQ9YaV6ijpaxC0PKTW0tSEWzNesNv4wayH-pNaSJM",
                  "refresh_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjAxSFZINTBWWEs5MFJKWlI5WENNMENCRkJRIiwidHlwIjoiSldUIn0.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAiLCJzdWIiOiJrMDFKNVkyUjBZQUZFU0ZUVzYzU1JTNTg4WjIiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo4MDAwIiwiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3YxL3JlYXV0aGVudGljYXRlIl0sImV4cCI6MTcyNDg5MDE1OCwibmJmIjoxNzI0ODg1NjU4LCJpYXQiOjE3MjQ4ODI5NTgsImp0aSI6IjAxSjZER0pFMFExMEcwQzY1U1NEUlQ3VDY3In0.Mzey5MWS-GRVhVAfISXH6keebNpoQTYWUVDhOnD-mENfWNurtkBpWMgV_FivpAHyXlH72Mv-cC0oaaUMYNMVRg5yCN6XQyYdUqcZsynULLkUUPcD7PGJLDIMe8CngAHITDmDRzdZaUpbWB4F-Ad_qEqzGhz3-PRAQxM7-Gt3IFNFVfWHJXTZzAiKHP_xtE4rnVczUx2sMXKPQHhxDVTiahMSAGiMVUWvnfKzwtv36U69cmfOw3UbG2IVZ6-2zm8ICSNesUqtwpjn1c5B_pYoqJNJYbp8jCzjRS2xT4xT7eDmMAjeFIiJEe6wuTvzU3ZwwqsXhLPtj27VNwHNHHL2qqnn0wTLx30amHkrBoEU44Rbf9Lxof6y_WDhZJIt7SeG1bDZ378falQd0v5yTColbaTk20jlADsoSdm8IgYoH91k1_-bzfHQkRTNUQI7YxCQWeP9zj-QzKdA7c86gyvYuPbsk29St0tGvQdS-aWa5ZLpDL3R5OLzO9zhqgNeGQVomF5YJaFAaBe4Y_6dyvNmHJB9cdfgEgj6B9cTzKdZWfn-r48E3xt0n41FdvYKgyDjR1gRBe7T-f55GbH5N0fR2Twdclc4DqD5c2gp5U0BTK-Uc2OBdT710Ws6mqdVljKoaG6VZjI-eA17pv7Khzdr8NWpmSUMYUGbAKtHFA7atsc"
                }
              }
            }
          },
          "400": {
            "description": "Bad Reauthentication Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldErrors"
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "field": "refresh_token",
                      "error": "missing refresh_token: this field is required"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Invalid Refresh Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "invalid reauthentication credentials"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts": {
      "get": {
        "summary": "List Accounts",
        "description": "Return a paginated list of customer accounts stored on the Envoy node.",
        "operationId": "listAccounts",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page_size"
          },
          {
            "$ref": "#/components/parameters/next_page_token"
          },
          {
            "$ref": "#/components/parameters/prev_page_token"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Account Page Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountList"
                },
                "example": {
                  "page": {
                    "page_size": 50
                  },
                  "accounts": [
                    {
                      "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                      "customer_id": "674907513",
                      "first_name": "James",
                      "last_name": "Bond",
                      "travel_address": "taLg4sBFp3cWhB9wN7qqPwDzq32bWwhibhFvADbiYp5fMR7asAxbqNrPuUyT4VzZa98oPk6dHcdKhov9jiraNrcZ7yQdikXcwbv",
                      "created": "2024-08-28T10:14:43-05:00",
                      "modified": "2024-08-28T12:23:24-05:00"
                    },
                    {
                      "id": "01J6FRR2NSTQ0TC7DDMAR91MG7",
                      "customer_id": "39910432",
                      "first_name": "Twilda",
                      "last_name": "Swansong",
                      "travel_address": "taLg4sBFp3cWhB9wN7qsiUF8pxo7JXtVShYkv5ix1wG2kX5y4pRiJ3TRHmeD8H67TLLm5wHyDktVw1onfDeQfESumf91mjRTMbi",
                      "created": "2024-08-29T14:09:21-05:00",
                      "modified": "2024-08-29T14:10:50-05:00"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Accounts Page Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "could not parse page query request"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to View Accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Account",
        "description": "Create a new customer account record.",
        "operationId": "createAccount",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Account information that includes all required writeable fields and no crypto addresses.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountForm"
              },
              "example": {
                "customer_id": "674907513",
                "first_name": "James",
                "last_name": "Bond",
                "ivms101": "CjwKEQoPCgRCb25kEgVKYW1lcxgCKiMKCjE5MjAtMTEtMTESFVdhdHRlbnNjaGVpZCwgR2VybWFueTICR0I"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Account Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                },
                "example": {
                  "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                  "customer_id": "674907513",
                  "first_name": "James",
                  "last_name": "Bond",
                  "travel_address": "taLg4sBFp3cWhB9wN7qqPwDzq32bWwhibhFvADbiYp5fMR7asAxbqNrPuUyT4VzZa98oPk6dHcdKhov9jiraNrcZ7yQdikXcwbv",
                  "ivms101": "CjwKEQoPCgRCb25kEgVKYW1lcxgCKiMKCjE5MjAtMTEtMTESFVdhdHRlbnNjaGVpZCwgR2VybWFueTICR0I",
                  "crypto_addresses": [],
                  "created": "2024-08-28T10:14:43-05:00",
                  "modified": "2024-08-28T12:23:24-05:00"
                }
              }
            }
          },
          "400": {
            "description": "Bad Create Account Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "could not parse account data"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to Manage Accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "422": {
            "description": "Account Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldErrors"
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "field": "id",
                      "error": "field id is a read only field"
                    },
                    {
                      "field": "travel_address",
                      "error": "field travel address is a read only field"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{accountID}": {
      "get": {
        "summary": "Account Detail",
        "description": "Return a detailed record of a single customer account object.",
        "operationId": "accountDetail",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountID",
            "in": "path",
            "description": "The ID of the account to fetch a detailed record of.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ULID",
              "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
            },
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          }
        ],
        "responses": {
          "200": {
            "description": "Account Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                },
                "example": {
                  "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                  "customer_id": "674907513",
                  "first_name": "James",
                  "last_name": "Bond",
                  "travel_address": "taLg4sBFp3cWhB9wN7qqPwDzq32bWwhibhFvADbiYp5fMR7asAxbqNrPuUyT4VzZa98oPk6dHcdKhov9jiraNrcZ7yQdikXcwbv",
                  "ivms101": "CjwKEQoPCgRCb25kEgVKYW1lcxgCKiMKCjE5MjAtMTEtMTESFVdhdHRlbnNjaGVpZCwgR2VybWFueTICR0I",
                  "crypto_addresses": [
                    {
                      "id": "01J6FRB1EGJCEZXRMQGW1FM0BR",
                      "crypto_address": "0x9268102451DE47C536C3AD92203D4E9692941E06",
                      "network": "ETH",
                      "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5XP69YEctxHMPwa7YTEU3QjKcC2RY9Jqjd4VsCsj396YMZvVCfFaYjDR7P",
                      "created": "2024-08-29T14:05:31-05:00",
                      "modified": "2024-08-30T18:39:02-05:00"
                    },
                    {
                      "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                      "crypto_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                      "network": "BTC",
                      "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5WTaDe5fEN9vFTCtNxb2bv1HegpR8RcuV4EAhxtvKt8wfx4SnH414o6eWU",
                      "created": "2024-08-28T10:14:43-05:00",
                      "modified": "2024-08-28T12:23:24-05:00"
                    }
                  ],
                  "created": "2024-08-28T10:14:43-05:00",
                  "modified": "2024-08-28T12:23:24-05:00"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to View Account Detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "404": {
            "description": "Account Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "account not found"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Account",
        "description": "Update an account record with new information.",
        "operationId": "updateAccount",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountID",
            "in": "path",
            "description": "The ID of the account to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ULID",
              "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
            },
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          }
        ],
        "requestBody": {
          "description": "A complete account record that should reflect the state of the account after the operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountForm"
              },
              "example": {
                "customer_id": "674907513",
                "first_name": "James",
                "last_name": "Bond",
                "ivms101": "CjwKEQoPCgRCb25kEgVKYW1lcxgCKiMKCjE5MjAtMTEtMTESFVdhdHRlbnNjaGVpZCwgR2VybWFueTICR0I"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Account Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                },
                "example": {
                  "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                  "customer_id": "674907513",
                  "first_name": "James",
                  "last_name": "Bond",
                  "travel_address": "taLg4sBFp3cWhB9wN7qqPwDzq32bWwhibhFvADbiYp5fMR7asAxbqNrPuUyT4VzZa98oPk6dHcdKhov9jiraNrcZ7yQdikXcwbv",
                  "ivms101": "CjwKEQoPCgRCb25kEgVKYW1lcxgCKiMKCjE5MjAtMTEtMTESFVdhdHRlbnNjaGVpZCwgR2VybWFueTICR0I",
                  "crypto_addresses": [
                    {
                      "id": "01J6FRB1EGJCEZXRMQGW1FM0BR",
                      "crypto_address": "0x9268102451DE47C536C3AD92203D4E9692941E06",
                      "network": "ETH",
                      "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5XP69YEctxHMPwa7YTEU3QjKcC2RY9Jqjd4VsCsj396YMZvVCfFaYjDR7P",
                      "created": "2024-08-29T14:05:31-05:00",
                      "modified": "2024-08-30T18:39:02-05:00"
                    },
                    {
                      "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                      "crypto_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                      "network": "BTC",
                      "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5WTaDe5fEN9vFTCtNxb2bv1HegpR8RcuV4EAhxtvKt8wfx4SnH414o6eWU",
                      "created": "2024-08-28T10:14:43-05:00",
                      "modified": "2024-08-28T12:23:24-05:00"
                    }
                  ],
                  "created": "2024-08-28T10:14:43-05:00",
                  "modified": "2024-08-28T12:23:24-05:00"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to Update Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "404": {
            "description": "Account Not Found (Cannot Update)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "account not found"
                }
              }
            }
          },
          "422": {
            "description": "Account Update Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldErrors"
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "field": "id",
                      "error": "field id is a read only field"
                    },
                    {
                      "field": "travel_address",
                      "error": "field travel address is a read only field"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Account",
        "description": "Delete an account with the specified ID.",
        "operationId": "deleteAccount",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountID",
            "in": "path",
            "description": "The ID of the account to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ULID",
              "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
            },
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          }
        ],
        "responses": {
          "200": {
            "description": "Account Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reply"
                },
                "example": {
                  "success": true
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to Delete Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "404": {
            "description": "Account Not Found (Cannot Delete)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "account not found"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{accountID}/crypto-addresses": {
      "get": {
        "summary": "List Crypto Addresses",
        "description": "Return a paginated list of crypto wallet addresses associated with the specified account",
        "operationId": "listCryptoAddresses",
        "tags": [
          "Crypto Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountID",
            "in": "path",
            "description": "The ID of the account to fetch the crypto addresses for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ULID",
              "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
            },
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          },
          {
            "$ref": "#/components/parameters/page_size"
          },
          {
            "$ref": "#/components/parameters/next_page_token"
          },
          {
            "$ref": "#/components/parameters/prev_page_token"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Crypto Addresses Page Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CryptoAddressList"
                },
                "example": {
                  "page": {
                    "page_size": 50
                  },
                  "crytpo_addresses": [
                    {
                      "id": "01J6FRB1EGJCEZXRMQGW1FM0BR",
                      "crypto_address": "0x9268102451DE47C536C3AD92203D4E9692941E06",
                      "network": "ETH",
                      "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5XP69YEctxHMPwa7YTEU3QjKcC2RY9Jqjd4VsCsj396YMZvVCfFaYjDR7P",
                      "created": "2024-08-29T14:05:31-05:00",
                      "modified": "2024-08-30T18:39:02-05:00"
                    },
                    {
                      "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                      "crypto_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                      "network": "BTC",
                      "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5WTaDe5fEN9vFTCtNxb2bv1HegpR8RcuV4EAhxtvKt8wfx4SnH414o6eWU",
                      "created": "2024-08-28T10:14:43-05:00",
                      "modified": "2024-08-28T12:23:24-05:00"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Crypto Addresses Page Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "could not parse page query request"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to View Crypto Addresses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Crypto Address",
        "description": "Create a new crypto wallet address record for the specified account.",
        "operationId": "createCryptoAddress",
        "tags": [
          "Crypto Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountID",
            "in": "path",
            "description": "The ID of the account to create the crypto addresses for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ULID",
              "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
            },
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          }
        ],
        "requestBody": {
          "description": "Crypto wallet address information that includes all required writeable fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CryptoAddressForm"
              },
              "example": {
                "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                "crypto_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                "network": "BTC"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Crypto Address Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CryptoAddress"
                },
                "example": {
                  "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                  "crypto_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                  "network": "BTC",
                  "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5WTaDe5fEN9vFTCtNxb2bv1HegpR8RcuV4EAhxtvKt8wfx4SnH414o6eWU",
                  "created": "2024-08-28T10:14:43-05:00",
                  "modified": "2024-08-28T12:23:24-05:00"
                }
              }
            }
          },
          "400": {
            "description": "Bad Create Crypto Address Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "could not parse account data"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to Manage Crypto Addresses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "422": {
            "description": "Crypto Address Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldErrors"
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "field": "crypto_address",
                      "error": "missing crypto_address: this field is required"
                    },
                    {
                      "field": "network",
                      "error": "could not parse network as a SLIP-0044 string"
                    },
                    {
                      "field": "travel_address",
                      "error": "field travel address is a read only field"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{accountID}/crypto-addresses/{cryptoAddressID}": {
      "get": {
        "summary": "Crypto Address Detail",
        "description": "Return a detailed record of a crypto address record for an account.",
        "operationId": "cryptoAddressesDetail",
        "tags": [
          "Crypto Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountID",
            "in": "path",
            "description": "The ID of the account to fetch the crypto address for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ULID",
              "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
            },
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          },
          {
            "name": "cryptoAddressID",
            "in": "path",
            "description": "The ID of the crypto address to fetch a detailed record of.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ULID",
              "example": "01J6FRB1EGJCEZXRMQGW1FM0BR"
            },
            "example": "01J6FRB1EGJCEZXRMQGW1FM0BR"
          }
        ],
        "responses": {
          "200": {
            "description": "Crypto Address Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CryptoAddress"
                },
                "example": {
                  "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                  "crypto_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                  "network": "BTC",
                  "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5WTaDe5fEN9vFTCtNxb2bv1HegpR8RcuV4EAhxtvKt8wfx4SnH414o6eWU",
                  "created": "2024-08-28T10:14:43-05:00",
                  "modified": "2024-08-28T12:23:24-05:00"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to View Crypto Address Detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "404": {
            "description": "Crypto Address Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "crypto address not found"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Crypto Address",
        "description": "Update an crypto address record with new information.",
        "operationId": "updateCryptoAddress",
        "tags": [
          "Crypto Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountID",
            "in": "path",
            "description": "The ID of the account owning the crypto address to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ULID",
              "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
            },
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          },
          {
            "name": "cryptoAddressID",
            "in": "path",
            "description": "The ID of the crypto address to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ULID",
              "example": "01J6FRB1EGJCEZXRMQGW1FM0BR"
            },
            "example": "01J6FRB1EGJCEZXRMQGW1FM0BR"
          }
        ],
        "requestBody": {
          "description": "A complete crypto address record that should reflect the state of the crypto address after the operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CryptoAddressForm"
              },
              "example": {
                "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                "crypto_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                "network": "BTC"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Crypto Adress Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CryptoAddress"
                },
                "example": {
                  "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                  "crypto_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                  "network": "BTC",
                  "travel_address": "ta5TXL58tSWo9eeNP1C4iSsybuX1KMeLiqeprHtF5WTaDe5fEN9vFTCtNxb2bv1HegpR8RcuV4EAhxtvKt8wfx4SnH414o6eWU",
                  "created": "2024-08-28T10:14:43-05:00",
                  "modified": "2024-08-28T12:23:24-05:00"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to Update Crypto Address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "404": {
            "description": "Crypto Address Not Found (Cannot Update)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "crypto address not found"
                }
              }
            }
          },
          "422": {
            "description": "Crypto Address Update Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldErrors"
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "field": "crypto_address",
                      "error": "missing crypto_address: this field is required"
                    },
                    {
                      "field": "network",
                      "error": "could not parse network as a SLIP-0044 string"
                    },
                    {
                      "field": "travel_address",
                      "error": "field travel address is a read only field"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Crypto Address",
        "description": "Delete an crypto address with the specified ID belonging to the specified acccount.",
        "operationId": "deleteCryptoAddress",
        "tags": [
          "Crypto Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountID",
            "in": "path",
            "description": "The ID of the account that manages the crypto address to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ULID",
              "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
            },
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          },
          {
            "name": "cryptoAddressID",
            "in": "path",
            "description": "The ID of the crypto address to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ULID",
              "example": "01J6FRB1EGJCEZXRMQGW1FM0BR"
            },
            "example": "01J6FRB1EGJCEZXRMQGW1FM0BR"
          }
        ],
        "responses": {
          "200": {
            "description": "Crypto Address Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reply"
                },
                "example": {
                  "success": true
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to Delete Crypto Address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "404": {
            "description": "Crypto Address Not Found (Cannot Delete)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "crypto address not found"
                }
              }
            }
          }
        }
      }
    },
    "/v1/counterparties": {
      "get": {
        "summary": "List Counterparties",
        "description": "Return a paginated list of counterparties stored on the Envoy node.",
        "operationId": "listCounterparties",
        "tags": [
          "Counterparties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page_size"
          },
          {
            "$ref": "#/components/parameters/next_page_token"
          },
          {
            "$ref": "#/components/parameters/prev_page_token"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Counterparty Page Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartyList"
                },
                "example": {
                  "page": {
                    "page_size": 50
                  },
                  "counterparties": [
                    {
                      "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                      "source": "gds",
                      "protocol": "trisa",
                      "endpoint": "api.alice.vaspbot.net:443",
                      "name": "AliceCoin",
                      "website": "https://alice.vaspbot.net",
                      "country": "GB",
                      "created": "2024-08-28T10:14:43-05:00"
                    },
                    {
                      "id": "01J6G3BE4QRY6355ZJ998SATXA",
                      "source": "gds",
                      "protocol": "trisa",
                      "endpoint": "api.bob.vaspbot.net:443",
                      "name": "BobVASP",
                      "website": "https://bob.vaspbot.net",
                      "country": "US",
                      "created": "2024-08-29T17:15:54-05:00"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Counterparties Page Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "could not parse page query request"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to View Counterparties",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Counterparty",
        "description": "Create a new counterparty record.",
        "operationId": "createCounterparty",
        "tags": [
          "Counterparties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Counterparty information that includes all required writeable fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartyForm"
              },
              "example": {
                "protocol": "trp",
                "common_name": "trp.alice.vaspbot.net",
                "endpoint": "https://trp.alice.vaspbot.net",
                "name": "AliceCoin",
                "website": "https://alice.vaspbot.net",
                "country": "GB",
                "business_category": "NON_VASP_ENTITY",
                "vasp_categories": [
                  "Other"
                ],
                "ivms101": "EmcKLwoeChpBbGljZSBUcmFkaW5nIENvbXBhbnksIExURBABCg0KCUFsaWNlQ29pbhADEjAIAiILTWFpbiBTdHJlZXQqAzEyM1IFNTU4ODBaClNtYWxsdmlsbGVqAktZggECVVMqAkRF"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Counterparty Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Counterparty"
                },
                "example": {
                  "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                  "source": "user",
                  "protocol": "trp",
                  "common_name": "trp.alice.vaspbot.net",
                  "endpoint": "https://trp.alice.vaspbot.net",
                  "name": "AliceCoin",
                  "website": "https://alice.vaspbot.net",
                  "country": "GB",
                  "business_category": "NON_VASP_ENTITY",
                  "vasp_categories": [
                    "Other"
                  ],
                  "ivms101": "EmcKLwoeChpBbGljZSBUcmFkaW5nIENvbXBhbnksIExURBABCg0KCUFsaWNlQ29pbhADEjAIAiILTWFpbiBTdHJlZXQqAzEyM1IFNTU4ODBaClNtYWxsdmlsbGVqAktZggECVVMqAkRF",
                  "created": "2024-08-28T10:14:43-05:00",
                  "modified": "2024-08-28T12:23:24-05:00"
                }
              }
            }
          },
          "400": {
            "description": "Bad Create Counterparty Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "could not parse counterparty data"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to Manage Counterparties",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "422": {
            "description": "Counterparty Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldErrors"
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "field": "country",
                      "error": "field country needs to be an ISO-3361 alpha-2 code"
                    },
                    {
                      "field": "registered_directory",
                      "error": "field registered_directory is a read only field"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/counterparties/search": {
      "get": {
        "summary": "Search Counterparties",
        "description": "Perform a fuzzy search on the counterparties' name field with results returned in order of closest match to least close match.",
        "operationId": "searchCounterparties",
        "tags": [
          "Counterparties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/query"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Search Response (even if no results are returned)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartyList"
                },
                "example": {
                  "page": {
                    "page_size": 50
                  },
                  "counterparties": [
                    {
                      "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                      "source": "gds",
                      "protocol": "trisa",
                      "endpoint": "api.alice.vaspbot.net:443",
                      "name": "AliceCoin",
                      "website": "https://alice.vaspbot.net",
                      "country": "GB",
                      "created": "2024-08-28T10:14:43-05:00"
                    },
                    {
                      "id": "01J6G3BE4QRY6355ZJ998SATXA",
                      "source": "gds",
                      "protocol": "trisa",
                      "endpoint": "api.bob.vaspbot.net:443",
                      "name": "BobVASP",
                      "website": "https://bob.vaspbot.net",
                      "country": "US",
                      "created": "2024-08-29T17:15:54-05:00"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Search Query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "could not parse counterparties search request"
                }
              }
            }
          }
        }
      }
    },
    "/v1/counterparties/{counterpartyID}": {
      "get": {
        "summary": "Counterparty Detail",
        "description": "Return a detailed record of a single counterparty object.",
        "operationId": "counterpartyDetail",
        "tags": [
          "Counterparties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "counterpartyID",
            "in": "path",
            "description": "The ID of the counterparty to fetch a detailed record of.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ULID",
              "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
            },
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          }
        ],
        "responses": {
          "200": {
            "description": "Counterparty Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Counterparty"
                },
                "example": {
                  "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                  "source": "gds",
                  "directory_id": "5154a0aa-502c-4179-a6f2-8b143d59edce",
                  "registered_directory": "trisatest.net",
                  "protocol": "trisa",
                  "common_name": "api.alice.vaspbot.net",
                  "endpoint": "api.alice.vaspbot.net:443",
                  "travel_address": "taYgWCfsnPN8hsqUAZWm4TW7WrHU5qZT3GiBPpfSApGSqoPMH1D6kiNRzST5Gz",
                  "name": "AliceCoin",
                  "website": "https://alice.vaspbot.net",
                  "country": "GB",
                  "business_category": "NON_VASP_ENTITY",
                  "vasp_categories": [
                    "Other"
                  ],
                  "ivms101": "EmcKLwoeChpBbGljZSBUcmFkaW5nIENvbXBhbnksIExURBABCg0KCUFsaWNlQ29pbhADEjAIAiILTWFpbiBTdHJlZXQqAzEyM1IFNTU4ODBaClNtYWxsdmlsbGVqAktZggECVVMqAkRF",
                  "verified_on": "2024-08-28T10:14:43-05:00",
                  "created": "2024-08-28T10:14:43-05:00",
                  "modified": "2024-08-28T12:23:24-05:00"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to View Counterparty Detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "404": {
            "description": "Counterparty Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "counterparty not found"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Counterparty",
        "description": "Update a counterparty record with new information. Note that only counterparties with the 'user' source may be updated.",
        "operationId": "updateCounterparty",
        "tags": [
          "Counterparties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "counterpartyID",
            "in": "path",
            "description": "The ID of the counterparty to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ULID",
              "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
            },
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          }
        ],
        "requestBody": {
          "description": "A complete counterparty record that should reflect the state of the counterparty after the operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartyForm"
              },
              "example": {
                "protocol": "trp",
                "common_name": "trp.alice.vaspbot.net",
                "endpoint": "https://trp.alice.vaspbot.net",
                "name": "AliceCoin",
                "website": "https://alice.vaspbot.net",
                "country": "GB",
                "business_category": "NON_VASP_ENTITY",
                "vasp_categories": [
                  "Other"
                ],
                "ivms101": "EmcKLwoeChpBbGljZSBUcmFkaW5nIENvbXBhbnksIExURBABCg0KCUFsaWNlQ29pbhADEjAIAiILTWFpbiBTdHJlZXQqAzEyM1IFNTU4ODBaClNtYWxsdmlsbGVqAktZggECVVMqAkRF"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Counterparty Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Counterparty"
                },
                "example": {
                  "id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                  "source": "gds",
                  "directory_id": "5154a0aa-502c-4179-a6f2-8b143d59edce",
                  "registered_directory": "trisatest.net",
                  "protocol": "trisa",
                  "common_name": "api.alice.vaspbot.net",
                  "endpoint": "api.alice.vaspbot.net:443",
                  "travel_address": "taYgWCfsnPN8hsqUAZWm4TW7WrHU5qZT3GiBPpfSApGSqoPMH1D6kiNRzST5Gz",
                  "name": "AliceCoin",
                  "website": "https://alice.vaspbot.net",
                  "country": "GB",
                  "business_category": "NON_VASP_ENTITY",
                  "vasp_categories": [
                    "Other"
                  ],
                  "ivms101": "EmcKLwoeChpBbGljZSBUcmFkaW5nIENvbXBhbnksIExURBABCg0KCUFsaWNlQ29pbhADEjAIAiILTWFpbiBTdHJlZXQqAzEyM1IFNTU4ODBaClNtYWxsdmlsbGVqAktZggECVVMqAkRF",
                  "verified_on": "2024-08-28T10:14:43-05:00",
                  "created": "2024-08-28T10:14:43-05:00",
                  "modified": "2024-08-28T12:23:24-05:00"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to Update Counterparty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "404": {
            "description": "Counterparty Not Found (Cannot Update)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "counterparty not found"
                }
              }
            }
          },
          "409": {
            "description": "Counterparty Conflict: Source Not Editable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this record cannot be edited"
                }
              }
            }
          },
          "422": {
            "description": "Counterparty Update Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldErrors"
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "field": "common_name",
                      "error": "missing common_name: this field is required"
                    },
                    {
                      "field": "protocol",
                      "error": "missing protocol: this field is required"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Counterparty",
        "description": "Delete an counterparty with the specified ID.",
        "operationId": "deleteCounterparty",
        "tags": [
          "Counterparties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "counterpartyID",
            "in": "path",
            "description": "The ID of the counterparty to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ULID",
              "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
            },
            "example": "01J6DJ9F691CF8E9H0V3ET0M0E"
          }
        ],
        "responses": {
          "200": {
            "description": "Counterparty Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reply"
                },
                "example": {
                  "success": true
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to Delete Counterparty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "404": {
            "description": "Counterparty Not Found (Cannot Delete)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "counterparty not found"
                }
              }
            }
          }
        }
      }
    },
    "/v1/transactions": {
      "get": {
        "summary": "List Transactions",
        "description": "Return a paginated list of transactions stored on the Envoy node.",
        "operationId": "listTransactions",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page_size"
          },
          {
            "$ref": "#/components/parameters/next_page_token"
          },
          {
            "$ref": "#/components/parameters/prev_page_token"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Transaction Page Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionList"
                },
                "example": {
                  "page": {
                    "page_size": 50
                  },
                  "transactions": [
                    {
                      "id": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5",
                      "source": "remote",
                      "status": "accepted",
                      "counterparty": "AliceCoin",
                      "counterparty_id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                      "originator": "James Bond",
                      "originator_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                      "beneficiary": "Twilda Swansong",
                      "beneficiary_address": "mtWVpHEcFcCGG9cuj1rUxhTGQZ1gEazxs6",
                      "virtual_asset": "BTC",
                      "amount": 1.23e-6,
                      "last_update": "2024-08-30T12:41:14-05:00",
                      "envelope_count": 8,
                      "created": "2024-08-30T11:14:55-05:00",
                      "modified": "2024-08-30T12:41:14-05:00"
                    },
                    {
                      "id": "a1edfdf3-a0b2-423a-b293-dd597a3664c0",
                      "source": "local",
                      "status": "pending",
                      "counterparty": "BobVASP",
                      "counterparty_id": "01J6JC3YZ207WZ9Y9RJQAWB9E6",
                      "originator": "Marcell Aven",
                      "originator_address": "0x435A6EA4EAFF2ACC2717F51AF55D7EC1528CA5C0",
                      "beneficiary": "Francine Le'vint",
                      "beneficiary_address": "0x79099D52D6FC37F1BEE10BA20EE5F8D86FFAB95D",
                      "virtual_asset": "ETH",
                      "amount": 628,
                      "last_update": "2024-08-30T14:28:46-05:00",
                      "envelope_count": 2,
                      "created": "2024-08-30T14:28:38-05:00",
                      "modified": "2024-08-30T14:28:46-05:00"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Transactions Page Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "could not parse page query request"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to View Transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Transaction",
        "description": "Create a new transaction record.",
        "operationId": "createTransaction",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Transaction information that includes all required writeable fields.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionForm"
              },
              "example": {
                "source": "remote",
                "status": "accepted",
                "counterparty": "AliceCoin",
                "counterparty_id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                "originator": "James Bond",
                "originator_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                "beneficiary": "Twilda Swansong",
                "beneficiary_address": "mtWVpHEcFcCGG9cuj1rUxhTGQZ1gEazxs6",
                "virtual_asset": "BTC",
                "amount": 1.23e-6
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                },
                "example": {
                  "id": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5",
                  "source": "remote",
                  "status": "accepted",
                  "counterparty": "AliceCoin",
                  "counterparty_id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                  "originator": "James Bond",
                  "originator_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                  "beneficiary": "Twilda Swansong",
                  "beneficiary_address": "mtWVpHEcFcCGG9cuj1rUxhTGQZ1gEazxs6",
                  "virtual_asset": "BTC",
                  "amount": 1.23e-6,
                  "last_update": "2024-08-30T12:41:14-05:00",
                  "envelope_count": 8,
                  "created": "2024-08-30T11:14:55-05:00",
                  "modified": "2024-08-30T12:41:14-05:00"
                }
              }
            }
          },
          "400": {
            "description": "Bad Create Transaction Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "could not parse transaction data"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to Manage Transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "422": {
            "description": "Transaction Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldErrors"
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "field": "status",
                      "error": "status must be one of draft, pending, action required, completed, or archived"
                    },
                    {
                      "field": "counterparty",
                      "error": "missing counterparty: this field is required"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/transactions/{transactionID}": {
      "get": {
        "summary": "Transaction Detail",
        "description": "Return a detailed record of a single transaction object.",
        "operationId": "transactionDetail",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "transactionID",
            "in": "path",
            "description": "The ID of the transaction to fetch a detailed record of.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "UUID",
              "example": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5"
            },
            "example": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction Retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                },
                "example": {
                  "id": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5",
                  "source": "remote",
                  "status": "accepted",
                  "counterparty": "AliceCoin",
                  "counterparty_id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                  "originator": "James Bond",
                  "originator_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                  "beneficiary": "Twilda Swansong",
                  "beneficiary_address": "mtWVpHEcFcCGG9cuj1rUxhTGQZ1gEazxs6",
                  "virtual_asset": "BTC",
                  "amount": 1.23e-6,
                  "last_update": "2024-08-30T12:41:14-05:00",
                  "envelope_count": 8,
                  "created": "2024-08-30T11:14:55-05:00",
                  "modified": "2024-08-30T12:41:14-05:00"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to View Transaction Detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "404": {
            "description": "Transaction Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "transaction not found"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Transaction",
        "description": "Update a transaction record with new information.",
        "operationId": "updateTransaction",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "transactionID",
            "in": "path",
            "description": "The ID of the transaction to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "UUID",
              "example": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5"
            },
            "example": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5"
          }
        ],
        "requestBody": {
          "description": "A complete transaction record that should reflect the state of the transaction after the operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionForm"
              },
              "example": {
                "source": "remote",
                "status": "accepted",
                "counterparty": "AliceCoin",
                "counterparty_id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                "originator": "James Bond",
                "originator_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                "beneficiary": "Twilda Swansong",
                "beneficiary_address": "mtWVpHEcFcCGG9cuj1rUxhTGQZ1gEazxs6",
                "virtual_asset": "BTC",
                "amount": 1.23e-6
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                },
                "example": {
                  "id": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5",
                  "source": "remote",
                  "status": "accepted",
                  "counterparty": "AliceCoin",
                  "counterparty_id": "01J6DJ9F691CF8E9H0V3ET0M0E",
                  "originator": "James Bond",
                  "originator_address": "mvr5YZBdAuV8sgexCHL4CRkbCvTV7odT1i",
                  "beneficiary": "Twilda Swansong",
                  "beneficiary_address": "mtWVpHEcFcCGG9cuj1rUxhTGQZ1gEazxs6",
                  "virtual_asset": "BTC",
                  "amount": 1.23e-6,
                  "last_update": "2024-08-30T12:41:14-05:00",
                  "envelope_count": 8,
                  "created": "2024-08-30T11:14:55-05:00",
                  "modified": "2024-08-30T12:41:14-05:00"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to Update Transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "404": {
            "description": "Transaction Not Found (Cannot Update)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "transaction not found"
                }
              }
            }
          },
          "422": {
            "description": "Transaction Update Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldErrors"
                },
                "example": {
                  "success": false,
                  "errors": [
                    {
                      "field": "status",
                      "error": "status must be one of draft, pending, action required, completed, or archived"
                    },
                    {
                      "field": "counterparty",
                      "error": "missing counterparty: this field is required"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Transaction",
        "description": "Delete a transaction with the specified ID.",
        "operationId": "deleteTransaction",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "transactionID",
            "in": "path",
            "description": "The ID of the transaction to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "UUID",
              "example": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5"
            },
            "example": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reply"
                },
                "example": {
                  "success": true
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized to Delete Transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "this endpoint requires authentication"
                }
              }
            }
          },
          "404": {
            "description": "Transaction Not Found (Cannot Delete)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorReply"
                },
                "example": {
                  "success": false,
                  "error": "transaction not found"
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {
    "transferCallback": {
      "post": {
        "summary": "Transfer Callback",
        "description": "When an incoming travel rule transfer/inquiry is received, if a webhook is configured on the Envoy node, the node will make a POST request with the incoming information and expects a reply that can be sent to the initiating counterparty.",
        "operationId": "transferCallback",
        "tags": [
          "Webhooks"
        ],
        "requestBody": {
          "description": "Callback request contains decrypted secure envelope data and other metadata related to the transfer.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transaction_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The related transaction ID, also the TRISA envelope ID",
                    "example": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5"
                  }
                },
                "example": {
                  "transaction_id": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5"
                }
              },
              "example": {
                "transaction_id": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully Handled Incoming Callback",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction_id": null,
                    "type": "string",
                    "format": "uuid",
                    "description": "Must return the same transaction ID to the server.",
                    "example": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5"
                  }
                },
                "example": {
                  "transaction_id": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5"
                }
              },
              "example": {
                "transaction_id": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5"
              }
            },
            "example": {
              "transaction_id": "f653bae7-79c9-45c2-87ae-eb5d1090dbf5"
            }
          }
        }
      }
    }
  }
}